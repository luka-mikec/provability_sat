/* Generated by the Nim Compiler v0.17.2 */
/*   (c) 2017 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3404 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI81401 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI75031 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI3440 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI75214 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI74011 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI65010 = {size: 0,kind: 32,base: null,node: null,finalizer: null};
var NTI65008 = {size: 0,kind: 32,base: null,node: null,finalizer: null};
var NTI65014 = {size: 0,kind: 19,base: null,node: null,finalizer: null};
var NTI65006 = {size: 0,kind: 34,base: null,node: null,finalizer: null};
var NTI65056 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI65022 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI42157 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI136 = {size: 0,kind: 2,base: null,node: null,finalizer: null};
var NTI71952 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3448 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3450 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3438 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3442 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3454 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3458 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI13609 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3506 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3501 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3424 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3446 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI3446 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3446.node = NNI3446;
NTI3501.base = NTI3424;
NTI3506.base = NTI3424;
var NNI3424 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3501, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3506, name: "up", sons: null}]};
NTI3424.node = NNI3424;
var NNI3408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3408.node = NNI3408;
NTI3424.base = NTI3408;
NTI3446.base = NTI3424;
var NNI13609 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI13609.node = NNI13609;
var NNI3458 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3458.node = NNI3458;
NTI3458.base = NTI3424;
var NNI3454 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3454.node = NNI3454;
NTI3454.base = NTI3424;
var NNI3442 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3442.node = NNI3442;
var NNI3438 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3438.node = NNI3438;
NTI3438.base = NTI3424;
NTI3442.base = NTI3438;
var NNI3450 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3450.node = NNI3450;
var NNI3448 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3448.node = NNI3448;
NTI3448.base = NTI3424;
NTI3450.base = NTI3448;
var NNI71952 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI136, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI136, name: "Field1", sons: null}]};
NTI71952.node = NNI71952;
var NNI42157 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI138, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI138, name: "Field1", sons: null}]};
NTI42157.node = NNI42157;
NTI65056.base = NTI65006;
NTI65014.base = NTI65008;
var NNI65022 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "ast", len: 0, typ: NTI65056, name: "ast", sons: null}, 
{kind: 1, offset: "boxed_sf", len: 0, typ: NTI65014, name: "boxed_sf", sons: null}, 
{kind: 1, offset: "rhd_sf", len: 0, typ: NTI65014, name: "rhd_sf", sons: null}, 
{kind: 1, offset: "prop_sf", len: 0, typ: NTI65014, name: "prop_sf", sons: null}, 
{kind: 1, offset: "root", len: 0, typ: NTI65010, name: "root", sons: null}]};
NTI65022.node = NNI65022;
var NNI74011 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI74011.node = NNI74011;
NTI74011.base = NTI3448;
NTI75214.base = NTI65008;
var NNI3440 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3440.node = NNI3440;
NTI3440.base = NTI3438;
NTI75031.base = NTI65008;
NTI3404.base = NTI104;
var NNI81401 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI3404, name: "Field1", sons: null}]};
NTI81401.node = NNI81401;

function makeNimstrLit(c_14603) {
		    var ln = c_14603.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_14603.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_19817, src_19818, ti_19819) {
	var result_20229 = null;

		switch (ti_19819.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_19801(ti_19819))) {
			result_20229 = src_19818;
			}
			else {
				result_20229 = [src_19818[0], src_19818[1]];
			}
			
			break;
		case 19:
			      if (dest_19817 === null || dest_19817 === undefined) {
        dest_19817 = {};
      }
      else {
        for (var key in dest_19817) { delete dest_19817[key]; }
      }
      for (var key in src_19818) { dest_19817[key] = src_19818[key]; }
      result_20229 = dest_19817;
    
			break;
		case 18:
		case 17:
			if (!((ti_19819.base == null))) {
			result_20229 = nimCopy(dest_19817, src_19818, ti_19819.base);
			}
			else {
			if ((ti_19819.kind == 17)) {
			result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {m_type: ti_19819} : dest_19817;
			}
			else {
				result_20229 = (dest_19817 === null || dest_19817 === undefined) ? {} : dest_19817;
			}
			}
			nimCopyAux(result_20229, src_19818, ti_19819.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_19818 === null) {
        result_20229 = null;
      }
      else {
        if (dest_19817 === null || dest_19817 === undefined) {
          dest_19817 = new Array(src_19818.length);
        }
        else {
          dest_19817.length = src_19818.length;
        }
        result_20229 = dest_19817;
        for (var i = 0; i < src_19818.length; ++i) {
          result_20229[i] = nimCopy(result_20229[i], src_19818[i], ti_19819.base);
        }
      }
    
			break;
		case 28:
			      if (src_19818 !== null) {
        result_20229 = src_19818.slice(0);
      }
    
			break;
		default: 
			result_20229 = src_19818;
			break;
		}

	return result_20229;

}

function eqStrings(a_17203, b_17204) {
		    if (a_17203 == b_17204) return true;
    if ((!a_17203) || (!b_17204)) return false;
    var alen = a_17203.length;
    if (alen != b_17204.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17203[i] != b_17204[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20264, value_20265, typ_20266) {
		      var result = new Array(len_20264);
      for (var i = 0; i < len_20264; ++i) result[i] = nimCopy(null, value_20265, typ_20266);
      return result;
    

	
}

function cstrToNimstr(c_14803) {
		  var ln = c_14803.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_14803.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_14803.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15003) {
		    var len = s_15003.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15003[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15003[i] < 128)
        asciiPart[i] = fcc(s_15003[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14006, ename_14007) {
		e_14006.name = ename_14007;
		if ((excHandler == 0)) {
		unhandledException(e_14006);
		}
		
		e_14006.trace = nimCopy(null, rawWriteStackTrace_13828(), NTI138);
		throw e_14006;

	
}

function chckRange(i_20409, a_20410, b_20411) {
			var Tmp1;

	var result_20412 = 0;

	BeforeRet: do {
			if (!(a_20410 <= i_20409)) Tmp1 = false; else {				Tmp1 = (i_20409 <= b_20411);			}		if (Tmp1) {
		result_20412 = i_20409;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20412;

}

function chckIndx(i_20403, a_20404, b_20405) {
			var Tmp1;

	var result_20406 = 0;

	BeforeRet: do {
			if (!(a_20404 <= i_20403)) Tmp1 = false; else {				Tmp1 = (i_20403 <= b_20405);			}		if (Tmp1) {
		result_20406 = i_20403;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_20406;

}

function addInt(a_17403, b_17404) {
		      var result = a_17403 + b_17404;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function subInt(a_17603, b_17604) {
		      var result = a_17603 - b_17604;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mulInt(a_17803, b_17804) {
		      var result = a_17803 * b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}

function mnewString(len_15203) {
		      var result = new Array(len_15203+1);
      result[0] = 0;
      result[len_15203] = 0;
      return result;
    

	
}

function nimCharToStr(x_13251) {
	var result_13252 = null;

		result_13252 = nimCopy(null, mnewString(1), NTI138);
		result_13252[0] = x_13251;

	return result_13252;

}
var ConstSet2 = setConstr(10, 3, 4, 5, 6);
var ConstSet3 = setConstr();

function addChar(x_20506, c_20507) {
		    x_20506[x_20506.length-1] = c_20507; x_20506.push(0);
  

	
}

function SetPlus(a_16603, b_16604) {
		      var result = {};
      for (var elem in a_16603) { result[elem] = true; }
      for (var elem in b_16604) { result[elem] = true; }
      return result;
    

	
}

function SetEq(a_16003, b_16004) {
		      for (var elem in a_16003) { if (!b_16004[elem]) return false; }
      for (var elem in b_16004) { if (!a_16003[elem]) return false; }
      return true;
    

	
}

function SetMul(a_16408, b_16409) {
		      var result = {};
      for (var elem in a_16408) {
        if (b_16409[elem]) { result[elem] = true; }
      }
      return result;
    

	
}
var ConstSet4 = setConstr();

function SetMinus(a_16803, b_16804) {
		      var result = {};
      for (var elem in a_16803) {
        if (!b_16804[elem]) { result[elem] = true; }
      }
      return result;
    

	
}

function SetCard(a_15803) {
		      var result = 0;
      for (var elem in a_15803) { ++result; }
      return result;
    

	
}
var ConstSet5 = setConstr();

function modInt(a_18203, b_18204) {
		      if (b_18204 == 0) raiseDivByZero();
      if (b_18204 == -1 && a_18203 == 2147483647) raiseOverflow();
      return Math.floor(a_18203 % b_18204);
    

	
}

function divInt(a_18003, b_18004) {
		      if (b_18004 == 0) raiseDivByZero();
      if (b_18004 == -1 && a_18003 == 2147483647) raiseOverflow();
      return Math.floor(a_18003 / b_18004);
    

	
}

function SetLe(a_16203, b_16204) {
		      for (var elem in a_16203) { if (!b_16204[elem]) return false; }
      return true;
    

	
}
var ConstSet6 = setConstr();
var ConstSet7 = setConstr();
var ConstSet8 = setConstr();
var ConstSet9 = setConstr();
var ConstSet10 = setConstr();
var ConstSet11 = setConstr();
var ConstSet12 = setConstr();
var ConstSet13 = setConstr();
var ConstSet14 = setConstr();
var ConstSet15 = setConstr();
var ConstSet16 = setConstr();
var ConstSet17 = setConstr();
var ConstSet18 = setConstr();
var ConstSet19 = setConstr();
var ConstSet20 = setConstr();
var ConstSet21 = setConstr();
var ConstSet22 = setConstr();
var ConstSet23 = setConstr();
var ConstSet24 = setConstr();
var ConstSet25 = setConstr();
var ConstSet26 = setConstr();
var ConstSet27 = setConstr();
var ConstSet28 = setConstr();
var nimvm_6119 = false;
var nim_program_result = 0;
var globalRaiseHook_11605 = [null];
var localRaiseHook_11610 = [null];
var outOfMemHook_11613 = [null];

function getTime_46642() {
	var result_49013 = 0.0;

	var F={procname:"times.getTime",prev:framePtr,filename:"lib/nim/pure/times.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 1333;
		result_49013 = new Date();
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_49013;

}
var startMilsecs_49112 = [getTime_46642()];
var objectID_51232 = [0];
var lc_64240 = [{}];

function isFatPointer_19801(ti_19803) {
	var result_19804 = false;

	BeforeRet: do {
		result_19804 = !((ConstSet1[ti_19803.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_19804;

}

function nimCopyAux(dest_19822, src_19823, n_19825) {
		switch (n_19825.kind) {
		case 0:
			break;
		case 1:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
    
			break;
		case 2:
			L1: do {
				var i_20215 = 0;
				var colontmp__20217 = 0;
				colontmp__20217 = (n_19825.len - 1);
				var res_20220 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20220 <= colontmp__20217)) break L3;
							i_20215 = res_20220;
							nimCopyAux(dest_19822, src_19823, n_19825.sons[i_20215]);
							res_20220 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_19822[n_19825.offset] = nimCopy(dest_19822[n_19825.offset], src_19823[n_19825.offset], n_19825.typ);
      for (var i = 0; i < n_19825.sons.length; ++i) {
        nimCopyAux(dest_19822, src_19823, n_19825.sons[i][1]);
      }
    
			break;
		}

	
}

function preprocessSub_40736(sub_40738, a_40740) {
		var m_40741 = (sub_40738 != null ? sub_40738.length-1 : 0);
		L1: do {
			var i_40752 = 0;
			var res_40766 = 0;
			L2: do {
					L3: while (true) {
					if (!(res_40766 <= 255)) break L3;
						i_40752 = res_40766;
						a_40740[i_40752] = (m_40741 + 1);
						res_40766 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
			var i_40762 = 0;
			var colontmp__40771 = 0;
			colontmp__40771 = (m_40741 - 1);
			var res_40774 = 0;
			L5: do {
					L6: while (true) {
					if (!(res_40774 <= colontmp__40771)) break L6;
						i_40762 = res_40774;
						a_40740[sub_40738[i_40762]] = (m_40741 - i_40762);
						res_40774 += 1;
					}
			} while(false);
		} while(false);

	
}

function findAux_40778(s_40780, sub_40781, start_40782, last_40783, a_40784) {
	var result_40785 = 0;

	BeforeRet: do {
		var m_40786 = (sub_40781 != null ? sub_40781.length-1 : 0);
		var n_40787 = (last_40783 + 1);
		var j_40788 = start_40782;
		L1: do {
				L2: while (true) {
				if (!(j_40788 <= (n_40787 - m_40786))) break L2;
					L3: do {
						L4: do {
							var k_40799 = 0;
							var colontmp__40811 = 0;
							colontmp__40811 = (m_40786 - 1);
							var res_40814 = 0;
							L5: do {
									L6: while (true) {
									if (!(res_40814 <= colontmp__40811)) break L6;
										k_40799 = res_40814;
										if (!((sub_40781[k_40799] == s_40780[(k_40799 + j_40788)]))) {
										break L3;
										}
										
										res_40814 += 1;
									}
							} while(false);
						} while(false);
						result_40785 = j_40788;
						break BeforeRet;
					} while(false);
					j_40788 += a_40784[s_40780[(j_40788 + m_40786)]];
				}
		} while(false);
		result_40785 = -1;
		break BeforeRet;
	} while (false);

	return result_40785;

}

function nsuReplaceStr(s_42090, sub_42091, by_42092) {
	var result_42093 = null;

		var a_42094 = [new Int32Array(256)];
		result_42093 = nimCopy(null, makeNimstrLit(""), NTI138);
		preprocessSub_40736(sub_42091, a_42094[0]);
		var last_42097 = (s_42090 != null ? (s_42090.length-2) : -1);
		var i_42098 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					var j_42099 = findAux_40778(s_42090, sub_42091, i_42098, last_42097, a_42094[0]);
					if ((j_42099 < 0)) {
					break L1;
					}
					
					if (result_42093 != null) { result_42093 = (result_42093.slice(0, -1)).concat((s_42090.slice(i_42098, ((j_42099 - 1))+1).concat(0))); } else { result_42093 = (s_42090.slice(i_42098, ((j_42099 - 1))+1).concat(0));};
					if (result_42093 != null) { result_42093 = (result_42093.slice(0, -1)).concat(by_42092); } else { result_42093 = by_42092;};
					i_42098 = (j_42099 + (sub_42091 != null ? sub_42091.length-1 : 0));
				}
		} while(false);
		if (result_42093 != null) { result_42093 = (result_42093.slice(0, -1)).concat((s_42090.slice(i_42098))); } else { result_42093 = (s_42090.slice(i_42098));};

	return result_42093;

}

function isPowerOfTwo_32627(x_32629) {
		var Tmp1;

	var result_32630 = false;

	BeforeRet: do {
		if (!(0 < x_32629)) Tmp1 = false; else {			Tmp1 = ((x_32629 & (x_32629 - 1)) == 0);		}		result_32630 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_32630;

}

function add_11629(x_11632, x_11632_Idx, y_11633) {
		        var len = x_11632[0].length-1;
        for (var i = 0; i < y_11633.length; ++i) {
          x_11632[0][len] = y_11633.charCodeAt(i);
          ++len;
        }
        x_11632[0][len] = 0
      

	
}

function auxWriteStackTrace_13604(f_13606) {
					var Tmp3;

	var result_13607 = [null];

		var it_13615 = f_13606;
		var i_13616 = 0;
		var total_13617 = 0;
		var tempFrames_13621 = arrayConstr(64, {Field0: null, Field1: 0}, NTI13609);
		L1: do {
				L2: while (true) {
					if (!!((it_13615 == null))) Tmp3 = false; else {						Tmp3 = (i_13616 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_13621[i_13616].Field0 = it_13615.procname;
					tempFrames_13621[i_13616].Field1 = it_13615.line;
					i_13616 += 1;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_13615 == null))) break L5;
					total_13617 += 1;
					it_13615 = it_13615.prev;
				}
		} while(false);
		result_13607[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_13617 == i_13616))) {
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_13607[0] = makeNimstrLit("(");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr(((total_13617 - i_13616))+"")); } else { result_13607[0] = cstrToNimstr(((total_13617 - i_13616))+"");};
		if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_13607[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_13815 = 0;
			var colontmp__13821 = 0;
			colontmp__13821 = (i_13616 - 1);
			var res_13824 = colontmp__13821;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_13824)) break L8;
						j_13815 = res_13824;
						add_11629(result_13607, 0, tempFrames_13621[j_13815].Field0);
						if ((0 < tempFrames_13621[j_13815].Field1)) {
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_13607[0] = makeNimstrLit(", line: ");};
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_13621[j_13815].Field1)+"")); } else { result_13607[0] = cstrToNimstr((tempFrames_13621[j_13815].Field1)+"");};
						}
						
						if (result_13607[0] != null) { result_13607[0] = (result_13607[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_13607[0] = makeNimstrLit("\x0A");};
						res_13824 -= 1;
					}
			} while(false);
		} while(false);

	return result_13607[0];

}

function rawWriteStackTrace_13828() {
	var result_13830 = null;

		if (!((framePtr == null))) {
		result_13830 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_13604(framePtr)), NTI138);
		}
		else {
			result_13830 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_13830;

}

function unhandledException(e_13853) {
			var Tmp1;

		var buf_13854 = [makeNimstrLit("")];
			if (!!(eqStrings(e_13853.message, null))) Tmp1 = false; else {				Tmp1 = !((e_13853.message[0] == 0));			}		if (Tmp1) {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(e_13853.message); } else { buf_13854[0] = e_13853.message;};
		}
		else {
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_13854[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_13854[0] = makeNimstrLit(" [");};
		add_11629(buf_13854, 0, e_13853.name);
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_13854[0] = makeNimstrLit("]\x0A");};
		if (buf_13854[0] != null) { buf_13854[0] = (buf_13854[0].slice(0, -1)).concat(rawWriteStackTrace_13828()); } else { buf_13854[0] = rawWriteStackTrace_13828();};
		var cbuf_14001 = toJSStr(buf_13854[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14001);
  }
  else {
    throw cbuf_14001;
  }
  

	
}

function sysFatal_22421(message_22427) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 2721;
		var e_22429 = null;
		F.line = 2722;
		e_22429 = {m_type: NTI3446, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2723;
		e_22429.message = nimCopy(null, message_22427, NTI138);
		F.line = 2724;
		raiseException(e_22429, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_22416(msg_22418) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 3605;
		sysFatal_22421(msg_22418);
	framePtr = F.prev;

	
}

function failedAssertImpl_22439(msg_22441) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 3613;
		raiseAssert_22416(msg_22441);
	framePtr = F.prev;

	
}

function raiseRangeError() {
		var e_14476 = null;
		e_14476 = {m_type: NTI3458, parent: null, name: null, message: null, trace: null, up: null};
		e_14476.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14476.parent = null;
		raiseException(e_14476, "RangeError");

	
}

function initTable_71036(initialSize_71041) {
	var result_71043 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(isPowerOfTwo_32627(initialSize_71041))) {
		F.line = 323;
		failedAssertImpl_22439(makeNimstrLit("isPowerOfTwo(initialSize) "));
		}
		
		F.line = 324;
		result_71043.counter = 0;
		F.line = 325;
		result_71043.data = new Array(chckRange(initialSize_71041, 0, 2147483647)); for (var i=0;i<chckRange(initialSize_71041, 0, 2147483647);++i) {result_71043.data[i]={Field0: 0, Field1: 0, Field2: 0};}	framePtr = F.prev;

	return result_71043;

}

function raiseIndexError() {
		var e_14494 = null;
		e_14494 = {m_type: NTI3454, parent: null, name: null, message: null, trace: null, up: null};
		e_14494.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_14494.parent = null;
		raiseException(e_14494, "IndexError");

	
}

function raiseOverflow() {
		var e_14440 = null;
		e_14440 = {m_type: NTI3442, parent: null, name: null, message: null, trace: null, up: null};
		e_14440.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14440.parent = null;
		raiseException(e_14440, "OverflowError");

	
}

function sf_set_65422(sf_65425, sf_65425_Idx, j_65426, value_65427) {
	var F={procname:"formula.sf_set",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 63;
		switch (j_65426) {
		case 0:
			F.line = 64;
			sf_65425[sf_65425_Idx] = ((sf_65425[sf_65425_Idx] & -256) | value_65427);
			break;
		case 1:
			F.line = 65;
			sf_65425[sf_65425_Idx] = ((sf_65425[sf_65425_Idx] & -65281) | (value_65427 << 8));
			break;
		case 2:
			F.line = 66;
			sf_65425[sf_65425_Idx] = ((sf_65425[sf_65425_Idx] & -16711681) | (value_65427 << 16));
			break;
		}
	framePtr = F.prev;

	
}

function make_subformula_66001(vcontent_66003, vleft_66004, vright_66005) {
	var result_66006 = [0];

	var F={procname:"formula.make_subformula",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 82;
		sf_set_65422(result_66006, 0, 0, vcontent_66003);
		F.line = 83;
		sf_set_65422(result_66006, 0, 1, vleft_66004);
		F.line = 84;
		sf_set_65422(result_66006, 0, 2, vright_66005);
	framePtr = F.prev;

	return result_66006[0];

}

function hash_66364(x_66368) {
	var result_66369 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"lib/nim/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_66369 = x_66368;
	framePtr = F.prev;

	return result_66369;

}

function isFilled_54465(hcode_54467) {
	var result_54468 = false;

	var F={procname:"tables.isFilled",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 18;
		result_54468 = !((hcode_54467 == 0));
	framePtr = F.prev;

	return result_54468;

}

function nextTry_54601(h_54603, maxHash_54604) {
	var result_54605 = 0;

	var F={procname:"tables.nextTry",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 28;
		result_54605 = (addInt(h_54603, 1) & maxHash_54604);
	framePtr = F.prev;

	return result_54605;

}

function rawGet_66352(t_66357, key_66359, hc_66361, hc_66361_Idx) {
						var Tmp3;

	var result_66362 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_66361[hc_66361_Idx] = hash_66364(key_66359);
		if ((hc_66361[hc_66361_Idx] == 0)) {
		F.line = 45;
		hc_66361[hc_66361_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_66386 = (hc_66361[hc_66361_Idx] & (t_66357.data != null ? (t_66357.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_54465(t_66357.data[chckIndx(h_66386, 0, t_66357.data.length-1)-0].Field0)) break L2;
						if (!(t_66357.data[chckIndx(h_66386, 0, t_66357.data.length-1)-0].Field0 == hc_66361[hc_66361_Idx])) Tmp3 = false; else {							Tmp3 = (t_66357.data[chckIndx(h_66386, 0, t_66357.data.length-1)-0].Field1 == key_66359);						}					if (Tmp3) {
					F.line = 38;
					result_66362 = h_66386;
					break BeforeRet;
					}
					
					F.line = 39;
					h_66386 = nextTry_54601(h_66386, (t_66357.data != null ? (t_66357.data.length-1) : -1));
				}
		} while(false);
		F.line = 75;
		result_66362 = subInt(-1, h_66386);
	} while (false);
	framePtr = F.prev;

	return result_66362;

}

function hasKey_66340(t_66346, key_66348) {
	var result_66349 = false;

	var F={procname:"hasKey.hasKey",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 235;
		var hc_66350 = [0];
		F.line = 236;
		result_66349 = (0 <= rawGet_66352(t_66346, key_66348, hc_66350, 0));
	framePtr = F.prev;

	return result_66349;

}

function contains_66327(t_66333, key_66335) {
	var result_66336 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 240;
		result_66336 = hasKey_66340(t_66333, key_66335);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_66336;

}

function X5BX5D__67252(t_67259, key_67261) {
	var result_67263 = [null, 0];
	var result_67263_Idx = 0;

	var F={procname:"[].[]",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 146;
		var hc_67265 = [0];
		F.line = 147;
		var index_67279 = rawGet_66352(t_67259, key_67261, hc_67265, 0);
		if ((0 <= index_67279)) {
		F.line = 148;
		result_67263 = t_67259.data[chckIndx(index_67279, 0, t_67259.data.length-1)-0]; result_67263_Idx = "Field2";
		}
		else {
			F.line = 151;
			F.line = 2701;
			var e_67606 = null;
			F.line = 2702;
			e_67606 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_67606.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(cstrToNimstr(((key_67261|0))+"")), NTI138);
			F.line = 2704;
			e_67606.parent = null;
			raiseException(e_67606, "KeyError");
		}
		
	framePtr = F.prev;

	return [result_67263, result_67263_Idx];

}

function mustRehash_54470(length_54472, counter_54473) {
	var result_54474 = false;

	var F={procname:"tables.mustRehash",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		if (!((counter_54473 < length_54472))) {
		F.line = 24;
		failedAssertImpl_22439(makeNimstrLit("\x0A  counter < length "));
		}
		
		F.line = 25;
		result_54474 = ((mulInt(length_54472, 2) < mulInt(counter_54473, 3)) || (subInt(length_54472, counter_54473) < 4));
	framePtr = F.prev;

	return result_54474;

}

function rawInsert_69461(t_69468, data_69472, data_69472_Idx, key_69474, val_69476, hc_69478, h_69480) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_69472[data_69472_Idx][chckIndx(h_69480, 0, data_69472[data_69472_Idx].length-1)-0].Field1 = key_69474;
		F.line = 65;
		data_69472[data_69472_Idx][chckIndx(h_69480, 0, data_69472[data_69472_Idx].length-1)-0].Field2 = val_69476;
		F.line = 79;
		data_69472[data_69472_Idx][chckIndx(h_69480, 0, data_69472[data_69472_Idx].length-1)-0].Field0 = hc_69478;
	framePtr = F.prev;

	
}

function enlarge_68358(t_68365) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 285;
		var n_68369 = null;
		F.line = 286;
		n_68369 = new Array(chckRange(mulInt((t_68365.data != null ? t_68365.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_68365.data != null ? t_68365.data.length : 0), 2), 0, 2147483647);++i) {n_68369[i]={Field0: 0, Field1: 0, Field2: 0};}		F.line = 287;
		var Tmp1 = t_68365.data; t_68365.data = n_68369; n_68369 = Tmp1;		L2: do {
			F.line = 288;
			var i_68575 = 0;
			F.line = 1967;
			var colontmp__70125 = 0;
			F.line = 288;
			colontmp__70125 = (n_68369 != null ? (n_68369.length-1) : -1);
			F.line = 1973;
			var res_70128 = 0;
			L3: do {
				F.line = 1974;
					L4: while (true) {
					if (!(res_70128 <= colontmp__70125)) break L4;
						F.line = 1975;
						i_68575 = res_70128;
						F.line = 289;
						var eh_68789 = n_68369[chckIndx(i_68575, 0, n_68369.length-1)-0].Field0;
						if (isFilled_54465(eh_68789)) {
						F.line = 291;
						var j_68798 = (eh_68789 & (t_68365.data != null ? (t_68365.data.length-1) : -1));
						L5: do {
							F.line = 292;
								L6: while (true) {
								if (!isFilled_54465(t_68365.data[chckIndx(j_68798, 0, t_68365.data.length-1)-0].Field0)) break L6;
									F.line = 293;
									j_68798 = nextTry_54601(j_68798, (t_68365.data != null ? (t_68365.data.length-1) : -1));
								}
						} while(false);
						F.line = 294;
						rawInsert_69461(t_68365, t_68365, "data", n_68369[chckIndx(i_68575, 0, n_68369.length-1)-0].Field1, n_68369[chckIndx(i_68575, 0, n_68369.length-1)-0].Field2, eh_68789, j_68798);
						}
						
						F.line = 1976;
						res_70128 = addInt(res_70128, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function rawGetKnownHC_70133(t_70138, key_70140, hc_70142) {
	var result_70143 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_70152 = (hc_70142 & (t_70138.data != null ? (t_70138.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_54465(t_70138.data[chckIndx(h_70152, 0, t_70138.data.length-1)-0].Field0)) break L2;
					if (((t_70138.data[chckIndx(h_70152, 0, t_70138.data.length-1)-0].Field0 == hc_70142) && (t_70138.data[chckIndx(h_70152, 0, t_70138.data.length-1)-0].Field1 == key_70140))) {
					F.line = 38;
					result_70143 = h_70152;
					break BeforeRet;
					}
					
					F.line = 39;
					h_70152 = nextTry_54601(h_70152, (t_70138.data != null ? (t_70138.data.length-1) : -1));
				}
		} while(false);
		F.line = 69;
		result_70143 = subInt(-1, h_70152);
	} while (false);
	framePtr = F.prev;

	return result_70143;

}

function X5BX5Deq__67931(t_67938, key_67940, val_67942) {
	var F={procname:"[]=.[]=",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 97;
		var hc_67943 = [0];
		F.line = 98;
		var index_67956 = rawGet_66352(t_67938, key_67940, hc_67943, 0);
		if ((0 <= index_67956)) {
		F.line = 99;
		t_67938.data[chckIndx(index_67956, 0, t_67938.data.length-1)-0].Field2 = val_67942;
		}
		else {
			if (mustRehash_54470((t_67938.data != null ? t_67938.data.length : 0), t_67938.counter)) {
			F.line = 90;
			enlarge_68358(t_67938);
			F.line = 91;
			index_67956 = rawGetKnownHC_70133(t_67938, key_67940, hc_67943[0]);
			}
			
			F.line = 92;
			index_67956 = subInt(-1, index_67956);
			F.line = 93;
			rawInsert_69461(t_67938, t_67938, "data", key_67940, val_67942, hc_67943[0], index_67956);
			F.line = 100;
			t_67938.counter = addInt(t_67938.counter, 1);
		}
		
	framePtr = F.prev;

	
}

function len_67865(t_67871) {
	var result_67872 = 0;

	var F={procname:"len.len",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 140;
		result_67872 = t_67871.counter;
	framePtr = F.prev;

	return result_67872;

}

function from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140) {
		var Tmp1;
		var Tmp2;
		var Tmp3;

	var result_66141 = 0;

	var F={procname:"formula.from_prefix",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 99;
		var s_66142 = a_66113[chckIndx(index_66115[index_66115_Idx], 0, a_66113.length-1)-0];
		F.line = 100;
		index_66115[index_66115_Idx] = addInt(index_66115[index_66115_Idx], 1);
		F.line = 101;
		F.line = 101;
		switch (s_66142) {
		case 66:
			F.line = 103;
			var arg_66152 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(8, arg_66152, 0);
			break;
		case 68:
			F.line = 106;
			var arg_66153 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(9, arg_66153, 0);
			break;
		case 35:
			Tmp1 = make_subformula_66001(1, 0, 0);
			break;
		case 84:
			Tmp1 = make_subformula_66001(2, 0, 0);
			break;
		case 62:
			F.line = 113;
			var vleft_66154 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			F.line = 114;
			var vright_66155 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(10, vleft_66154, vright_66155);
			break;
		case 126:
			F.line = 117;
			var vleft_66156 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(7, vleft_66156, 0);
			break;
		case 38:
			F.line = 120;
			var vleft_66157 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			F.line = 121;
			var vright_66158 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(4, vleft_66157, vright_66158);
			break;
		case 37:
			F.line = 124;
			var vleft_66159 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			F.line = 125;
			var vright_66160 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(6, vleft_66159, vright_66160);
			break;
		case 124:
			F.line = 128;
			var vleft_66161 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			F.line = 129;
			var vright_66162 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(5, vleft_66161, vright_66162);
			break;
		case 45:
			F.line = 132;
			var vleft_66163 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			F.line = 133;
			var vright_66164 = from_prefix_66111(a_66113, index_66115, index_66115_Idx, subformulas_66140);
			Tmp1 = make_subformula_66001(3, vleft_66163, vright_66164);
			break;
		default: 
			Tmp1 = s_66142;
			break;
		}
		var value_66172 = Tmp1;
		F.line = 137;
		if (contains_66327(subformulas_66140, value_66172)) {
		Tmp2 = (Tmp3 = X5BX5D__67252(subformulas_66140, value_66172), Tmp3[0])[Tmp3[1]];
		}
		else {
			L4: do {
				F.line = 141;
				X5BX5Deq__67931(subformulas_66140, value_66172, chckRange(len_67865(subformulas_66140), -128, 127));
			} while(false);
		Tmp2 = chckRange(subInt(len_67865(subformulas_66140), 1), -128, 127);
		}
		
		result_66141 = Tmp2;
	framePtr = F.prev;

	return result_66141;

}

function from_prefix_71028(a_71030) {
	var result_71031 = [{ast: new Int32Array(256), boxed_sf: {}, rhd_sf: {}, prop_sf: {}, root: 0}];

	var F={procname:"formula.from_prefix",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 146;
		var a_71032 = nsuReplaceStr(nsuReplaceStr(a_71030, makeNimstrLit("D"), makeNimstrLit("~B~")), makeNimstrLit(" "), makeNimstrLit(""));
		F.line = 148;
		var sf_71211 = [initTable_71036(64)];
		F.line = 149;
		var i_71212 = [0];
		F.line = 150;
		result_71031[0].root = from_prefix_66111(a_71032, i_71212, 0, sf_71211[0]);
		L1: do {
			F.line = 151;
			var key_71890 = 0;
			F.line = 151;
			var val_71891 = 0;
			L2: do {
				F.line = 244;
				var h_71899 = 0;
				F.line = 1983;
				var colontmp__71901 = 0;
				F.line = 244;
				colontmp__71901 = (sf_71211[0].data != null ? (sf_71211[0].data.length-1) : -1);
				F.line = 1986;
				var res_71903 = 0;
				L3: do {
					F.line = 1987;
						L4: while (true) {
						if (!(res_71903 <= colontmp__71901)) break L4;
							F.line = 1988;
							h_71899 = res_71903;
							if (isFilled_54465(sf_71211[0].data[chckIndx(h_71899, 0, sf_71211[0].data.length-1)-0].Field0)) {
							F.line = 245;
							key_71890 = sf_71211[0].data[chckIndx(h_71899, 0, sf_71211[0].data.length-1)-0].Field1;
							F.line = 245;
							val_71891 = sf_71211[0].data[chckIndx(h_71899, 0, sf_71211[0].data.length-1)-0].Field2;
							F.line = 152;
							result_71031[0].ast[chckIndx(val_71891, 0, result_71031[0].ast.length-1)-0] = key_71890;
							}
							
							F.line = 1989;
							res_71903 = addInt(res_71903, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		F.line = 153;
		update_gamma_66015(result_71031[0]);
	framePtr = F.prev;

	return result_71031[0];

}

function ft_to_chr_71910(ft_71912) {
		var Tmp1;

	var result_71913 = 0;

	var F={procname:"formula.ft_to_chr",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 172;
		F.line = 172;
		switch (ft_71912) {
		case 1:
			Tmp1 = 35;
			break;
		case 2:
			Tmp1 = 84;
			break;
		case 10:
			Tmp1 = 62;
			break;
		case 3:
			Tmp1 = 45;
			break;
		case 4:
			Tmp1 = 38;
			break;
		case 5:
			Tmp1 = 124;
			break;
		case 6:
			Tmp1 = 37;
			break;
		case 8:
			Tmp1 = 66;
			break;
		case 9:
			Tmp1 = 68;
			break;
		case 7:
			Tmp1 = 126;
			break;
		case 11:
			Tmp1 = 63;
			break;
		default: 
			Tmp1 = 63;
			break;
		}
		result_71913 = Tmp1;
	framePtr = F.prev;

	return result_71913;

}

function exprnode_to_prefix_72219(e_72222) {
		var Tmp1;

	var result_72223 = null;

	var F={procname:"formula.exprnode_to_prefix",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 304;
		F.line = 304;
		switch (e_72222.ftype) {
		case 11:
			Tmp1 = nimCharToStr(e_72222.data);
			break;
		case 2:
		case 1:
			Tmp1 = nimCharToStr(ft_to_chr_71910(e_72222.ftype));
			break;
		case 8:
		case 9:
		case 7:
			Tmp1 = [ft_to_chr_71910(e_72222.ftype)].concat(exprnode_to_prefix_72219(e_72222.lexpr));
			break;
		case 10:
		case 3:
		case 4:
		case 5:
		case 6:
			Tmp1 = [ft_to_chr_71910(e_72222.ftype)].concat(exprnode_to_prefix_72219(e_72222.lexpr).slice(0,-1),exprnode_to_prefix_72219(e_72222.rexpr));
			break;
		case 12:
			Tmp1 = exprnode_to_prefix_72219(e_72222.lexpr);
			break;
		default: 
			Tmp1 = makeNimstrLit("???");
			break;
		}
		result_72223 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_72223;

}

function toks_71948(str_71950, i_71951) {
		var Tmp1;

	var result_71955 = {Field0: 0, Field1: 0};

	var F={procname:"formula.toks",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 225;
		F.line = 225;
		var c_71956 = str_71950[chckIndx(addInt(i_71951, 0), 0, str_71950.length-1)-0];
		F.line = 226;
		F.line = 226;
		switch (subInt((str_71950 != null ? str_71950.length-1 : 0), i_71951)) {
		case 1:
			Tmp1 = 0;
			break;
		default: 
			Tmp1 = str_71950[chckIndx(addInt(i_71951, 1), 0, str_71950.length-1)-0];
			break;
		}
		var p_71957 = Tmp1;
		nimCopy(result_71955, {Field0: c_71956, Field1: p_71957}, NTI71952);
	framePtr = F.prev;

	return result_71955;

}

function chr_to_ft_71914(chr_71916) {
		var Tmp1;

	var result_71917 = 0;

	var F={procname:"formula.chr_to_ft",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 187;
		F.line = 187;
		switch (chr_71916) {
		case 35:
			Tmp1 = 1;
			break;
		case 84:
			Tmp1 = 2;
			break;
		case 62:
			Tmp1 = 10;
			break;
		case 45:
			Tmp1 = 3;
			break;
		case 38:
			Tmp1 = 4;
			break;
		case 124:
			Tmp1 = 5;
			break;
		case 37:
			Tmp1 = 6;
			break;
		case 66:
			Tmp1 = 8;
			break;
		case 68:
			Tmp1 = 9;
			break;
		case 126:
			Tmp1 = 7;
			break;
		case 40:
			Tmp1 = 12;
			break;
		default: 
			Tmp1 = 0;
			break;
		}
		result_71917 = Tmp1;
	framePtr = F.prev;

	return result_71917;

}

function infixp_71959(str_71961, i_71963, i_71963_Idx, preferunary_71964) {
	var result_71966 = null;

	var F={procname:"formula.infixp",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 232;
		F.line = 232;
		result_71966 = {ftype: 0, data: 0, lexpr: null, rexpr: null};
		F.line = 234;
		var c_71975 = 0;
		F.line = 234;
		var p_71976 = 0;
		F.line = 235;
		var __71977 = toks_71948(str_71961, i_71963[i_71963_Idx]);
		F.line = 235;
		c_71975 = __71977["Field0"];
		F.line = 235;
		p_71976 = __71977["Field1"];
		F.line = 236;
		var am_unary_71978 = preferunary_71964;
		F.line = 238;
		var ft_71979 = chr_to_ft_71914(c_71975);
		F.line = 239;
		result_71966.ftype = ft_71979;
		F.line = 241;
		switch (ft_71979) {
		case 12:
			F.line = 243;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 244;
			result_71966.lexpr = infixp_71959(str_71961, i_71963, i_71963_Idx, false);
			F.line = 245;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 246;
			var __71998 = toks_71948(str_71961, i_71963[i_71963_Idx]);
			F.line = 246;
			c_71975 = __71998["Field0"];
			F.line = 246;
			p_71976 = __71998["Field1"];
			if (!((c_71975 == 41))) {
			F.line = 247;
			failedAssertImpl_22439(makeNimstrLit("c == \')\' "));
			}
			
			break;
		case 8:
		case 9:
		case 7:
			F.line = 249;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 250;
			result_71966.lexpr = infixp_71959(str_71961, i_71963, i_71963_Idx, true);
			break;
		case 2:
		case 1:
			F.line = 252;
			result_71966.ftype = ft_71979;
			break;
		default: 
			F.line = 254;
			result_71966.ftype = 11;
			F.line = 255;
			result_71966.data = c_71975;
			break;
		}
		if (am_unary_71978) {
		F.line = 258;
		break BeforeRet;
		}
		
		F.line = 261;
		var __72010 = toks_71948(str_71961, i_71963[i_71963_Idx]);
		F.line = 261;
		c_71975 = __72010["Field0"];
		F.line = 261;
		p_71976 = __72010["Field1"];
		F.line = 262;
		var tn_72011 = chr_to_ft_71914(p_71976);
		if (!((ConstSet2[tn_72011] != undefined))) {
		F.line = 264;
		break BeforeRet;
		}
		
		F.line = 267;
		var lexpr_72022 = result_71966;
		F.line = 268;
		result_71966 = {ftype: 0, data: 0, lexpr: null, rexpr: null};
		F.line = 269;
		result_71966.lexpr = lexpr_72022;
		F.line = 271;
		i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
		F.line = 272;
		var __72040 = toks_71948(str_71961, i_71963[i_71963_Idx]);
		F.line = 272;
		c_71975 = __72040["Field0"];
		F.line = 272;
		p_71976 = __72040["Field1"];
		F.line = 273;
		ft_71979 = chr_to_ft_71914(c_71975);
		F.line = 274;
		result_71966.ftype = ft_71979;
		F.line = 276;
		i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
		F.line = 277;
		var __72050 = toks_71948(str_71961, i_71963[i_71963_Idx]);
		F.line = 277;
		c_71975 = __72050["Field0"];
		F.line = 277;
		p_71976 = __72050["Field1"];
		F.line = 278;
		ft_71979 = chr_to_ft_71914(c_71975);
		F.line = 280;
		result_71966.rexpr = {ftype: 0, data: 0, lexpr: null, rexpr: null};
		F.line = 281;
		result_71966.rexpr.ftype = ft_71979;
		F.line = 282;
		switch (ft_71979) {
		case 12:
			F.line = 284;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 285;
			result_71966.rexpr.lexpr = infixp_71959(str_71961, i_71963, i_71963_Idx, false);
			F.line = 286;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 287;
			var __72077 = toks_71948(str_71961, i_71963[i_71963_Idx]);
			F.line = 287;
			c_71975 = __72077["Field0"];
			F.line = 287;
			p_71976 = __72077["Field1"];
			if (!((c_71975 == 41))) {
			F.line = 288;
			failedAssertImpl_22439(makeNimstrLit("c == \')\' "));
			}
			
			break;
		case 8:
		case 9:
		case 7:
			F.line = 290;
			i_71963[i_71963_Idx] = addInt(i_71963[i_71963_Idx], 1);
			F.line = 291;
			result_71966.rexpr.lexpr = infixp_71959(str_71961, i_71963, i_71963_Idx, true);
			break;
		case 2:
		case 1:
			F.line = 293;
			result_71966.rexpr.ftype = ft_71979;
			break;
		default: 
			F.line = 295;
			result_71966.rexpr.ftype = 11;
			F.line = 296;
			result_71966.rexpr.data = c_71975;
			break;
		}
		result_71966 = result_71966;
	} while (false);
	framePtr = F.prev;

	return result_71966;

}

function infixp_72212(str_72214) {
	var result_72216 = null;

	var F={procname:"formula.infixp",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 300;
		var i_72217 = [0];
		F.line = 301;
		result_72216 = infixp_71959(nsuReplaceStr(str_72214, makeNimstrLit(" "), makeNimstrLit("")), i_72217, 0, false);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_72216;

}

function nsuContinuesWith(s_40562, substr_40563, start_40564) {
	var result_40565 = false;

	BeforeRet: do {
		var i_40566 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					if ((substr_40563[i_40566] == 0)) {
					result_40565 = true;
					break BeforeRet;
					}
					
					if (!((s_40562[(i_40566 + start_40564)] == substr_40563[i_40566]))) {
					result_40565 = false;
					break BeforeRet;
					}
					
					i_40566 += 1;
				}
		} while(false);
	} while (false);

	return result_40565;

}

function multiReplace_42153(s_42155, replacements_42158) {
	var result_42159 = null;

		result_42159 = nimCopy(null, mnewString(0), NTI138);
		var i_42160 = 0;
		var fastChk_42164 = ConstSet3;
		L1: do {
			var tup_42189 = {Field0: null, Field1: null};
			var i_42240 = 0;
			L2: do {
					L3: while (true) {
					if (!(i_42240 < (replacements_42158 != null ? replacements_42158.length : 0))) break L3;
						nimCopy(tup_42189, replacements_42158[i_42240], NTI42157);
						fastChk_42164[tup_42189["Field0"][0]] = true;
						i_42240 += 1;
					}
			} while(false);
		} while(false);
		L4: do {
				L5: while (true) {
				if (!(i_42160 < (s_42155 != null ? s_42155.length-1 : 0))) break L5;
					L6: do {
						if ((fastChk_42164[s_42155[i_42160]] != undefined)) {
						L7: do {
							var tup_42217 = {Field0: null, Field1: null};
							var i_42245 = 0;
							L8: do {
									L9: while (true) {
									if (!(i_42245 < (replacements_42158 != null ? replacements_42158.length : 0))) break L9;
										nimCopy(tup_42217, replacements_42158[i_42245], NTI42157);
										if (nsuContinuesWith(s_42155, tup_42217["Field0"], i_42160)) {
										if (result_42159 != null) { result_42159 = (result_42159.slice(0, -1)).concat(tup_42217["Field1"]); } else { result_42159 = tup_42217["Field1"];};
										i_42160 += (tup_42217["Field0"] != null ? tup_42217["Field0"].length-1 : 0);
										break L6;
										}
										
										i_42245 += 1;
									}
							} while(false);
						} while(false);
						}
						
						if (result_42159 != null) { addChar(result_42159, s_42155[i_42160]); } else { result_42159 = [s_42155[i_42160], 0]; };
						i_42160 += 1;
					} while(false);
				}
		} while(false);

	return result_42159;

}

function from_infix_72224(str_72226) {
	var result_72227 = {ast: new Int32Array(256), boxed_sf: {}, rhd_sf: {}, prop_sf: {}, root: 0};

	var F={procname:"formula.from_infix",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 319;
		nimCopy(result_72227, from_prefix_71028(exprnode_to_prefix_72219(infixp_72212(multiReplace_42153(str_72226, [{Field0: makeNimstrLit("->"), Field1: makeNimstrLit("-")}, {Field0: makeNimstrLit("&&"), Field1: makeNimstrLit("&")}, {Field0: makeNimstrLit("\\/"), Field1: makeNimstrLit("|")}, {Field0: makeNimstrLit("||"), Field1: makeNimstrLit("|")}, {Field0: makeNimstrLit("/\\"), Field1: makeNimstrLit("&")}, {Field0: makeNimstrLit("_|_"), Field1: makeNimstrLit("#")}, {Field0: makeNimstrLit("[]"), Field1: makeNimstrLit("B")}, {Field0: makeNimstrLit("<>"), Field1: makeNimstrLit("D")}, {Field0: makeNimstrLit("\xC2\xAC"), Field1: makeNimstrLit("~")}, {Field0: makeNimstrLit("|>"), Field1: makeNimstrLit(">")}, {Field0: makeNimstrLit("*"), Field1: makeNimstrLit("&")}, {Field0: makeNimstrLit("+"), Field1: makeNimstrLit("|")}])))), NTI65022);
	framePtr = F.prev;

	return result_72227;

}

function isSome_75077(self_75082) {
	var result_75083 = false;

	var F={procname:"isSome.isSome",prev:framePtr,filename:"lib/nim/pure/options.nim",line:0};
	framePtr = F;
		F.line = 93;
		result_75083 = self_75082.has;
	framePtr = F.prev;

	return result_75083;

}

function isNone_75117(self_75122) {
	var result_75123 = false;

	var F={procname:"isNone.isNone",prev:framePtr,filename:"lib/nim/pure/options.nim",line:0};
	framePtr = F;
		F.line = 96;
		result_75123 = !(self_75122.has);
	framePtr = F.prev;

	return result_75123;

}

function get_75101(self_75106) {
	var result_75107 = 0;

	var F={procname:"get.get",prev:framePtr,filename:"lib/nim/pure/options.nim",line:0};
	framePtr = F;
		F.line = 105;
		if (isNone_75117(self_75106)) {
		F.line = 108;
		raiseException({message: makeNimstrLit("Can\'t obtain a value from a `none`"), m_type: NTI74011, parent: null, name: null, trace: null, up: null}, "UnpackError:ObjectType");
		}
		
		result_75107 = self_75106.val;
	framePtr = F.prev;

	return result_75107;

}

function raiseDivByZero() {
		var e_14458 = null;
		e_14458 = {m_type: NTI3440, parent: null, name: null, message: null, trace: null, up: null};
		e_14458.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_14458.parent = null;
		raiseException(e_14458, "DivByZeroError");

	
}

function map_75872(s_75878, f_75883) {
	var result_75885 = {};

	var F={procname:"map.map",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 132;
			var val_75893 = 0;
			F.line = 2112;
			var i_75907 = -128;
			L2: do {
				F.line = 2113;
					L3: while (true) {
					if (!(i_75907 <= 127)) break L3;
						if ((s_75878[chckRange(i_75907, -128, 127)] != undefined)) {
						F.line = 2114;
						val_75893 = chckRange(i_75907, -128, 127);
						F.line = 133;
						result_75885[f_75883(val_75893)] = true;
						}
						
						F.line = 2115;
						i_75907 = addInt(i_75907, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_75885;

}

function all_76080(s_76085, pred_76090) {
	var result_76091 = false;

	var F={procname:"all.all",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 120;
			var val_76099 = 0;
			F.line = 2112;
			var i_76103 = -128;
			L2: do {
				F.line = 2113;
					L3: while (true) {
					if (!(i_76103 <= 127)) break L3;
						if ((s_76085[chckRange(i_76103, -128, 127)] != undefined)) {
						F.line = 2114;
						val_76099 = chckRange(i_76103, -128, 127);
						if (!(pred_76090(val_76099))) {
						F.line = 122;
						result_76091 = false;
						break BeforeRet;
						}
						
						}
						
						F.line = 2115;
						i_76103 = addInt(i_76103, 1);
					}
			} while(false);
		} while(false);
		F.line = 123;
		result_76091 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_76091;

}

function none_76045() {
	var result_76057 = {val: 0, has: false};

	var F={procname:"none.none",prev:framePtr,filename:"lib/nim/pure/options.nim",line:0};
	framePtr = F;
		F.line = 89;
		result_76057.has = false;
	framePtr = F.prev;

	return result_76057;

}

function some_76059(val_76063) {
	var result_76065 = {val: 0, has: false};

	var F={procname:"some.some",prev:framePtr,filename:"lib/nim/pure/options.nim",line:0};
	framePtr = F;
		F.line = 84;
		result_76065.has = true;
		F.line = 85;
		result_76065.val = val_76063;
	framePtr = F.prev;

	return result_76065;

}

function X5BX5D__50011(x_50013, i_50014) {
	var result_50015 = false;

	var F={procname:"helpers.[]",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
		F.line = 20;
		result_50015 = ((modInt(((x_50013 & 0xffff) >>> i_50014), 2)|0) == 1);
	framePtr = F.prev;

	return result_50015;

}

function X5BX5Deq__50025(x_50028, x_50028_Idx, i_50029, b_50030) {
			var Tmp1;
			var Tmp2;
				var Tmp3;

	var F={procname:"helpers.[]=",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
			if (!X5BX5D__50011(x_50028[x_50028_Idx], i_50029)) Tmp2 = false; else {				Tmp2 = !(b_50030);			}			if (Tmp2) Tmp1 = true; else {				if (!!(X5BX5D__50011(x_50028[x_50028_Idx], i_50029))) Tmp3 = false; else {					Tmp3 = b_50030;				}				Tmp1 = Tmp3;			}		if (Tmp1) {
		F.line = 23;
		x_50028[x_50028_Idx] = (x_50028[x_50028_Idx] ^ (1 << i_50029));
		}
		
	framePtr = F.prev;

	
}

function swap_50071(x_50074, x_50074_Idx, i_50075, j_50076) {
	var F={procname:"helpers.swap",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
		F.line = 29;
		var old_50077 = X5BX5D__50011(x_50074[x_50074_Idx], j_50076);
		F.line = 30;
		X5BX5Deq__50025(x_50074, x_50074_Idx, j_50076, X5BX5D__50011(x_50074[x_50074_Idx], i_50075));
		F.line = 31;
		X5BX5Deq__50025(x_50074, x_50074_Idx, i_50075, old_50077);
	framePtr = F.prev;

	
}

function next_permutation_75495(x_75500, x_75500_Idx, n_75502) {
					var Tmp3;
					var Tmp6;

	var result_75503 = false;

	var F={procname:"next_permutation.next_permutation",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((n_75502 < 2)) {
		F.line = 37;
		result_75503 = false;
		break BeforeRet;
		}
		
		F.line = 39;
		var i_75504 = subInt(n_75502, 1);
		L1: do {
			F.line = 40;
				L2: while (true) {
					if (!(0 < i_75504)) Tmp3 = false; else {						Tmp3 = (X5BX5D__50011(x_75500[x_75500_Idx], i_75504) <= X5BX5D__50011(x_75500[x_75500_Idx], subInt(i_75504, 1)));					}				if (!Tmp3) break L2;
					F.line = 41;
					i_75504 = subInt(i_75504, 1);
				}
		} while(false);
		if ((i_75504 == 0)) {
		F.line = 44;
		result_75503 = false;
		break BeforeRet;
		}
		
		F.line = 46;
		var j_75514 = subInt(n_75502, 1);
		L4: do {
			F.line = 47;
				L5: while (true) {
					if (!(i_75504 <= j_75514)) Tmp6 = false; else {						Tmp6 = (X5BX5D__50011(x_75500[x_75500_Idx], j_75514) <= X5BX5D__50011(x_75500[x_75500_Idx], subInt(i_75504, 1)));					}				if (!Tmp6) break L5;
					F.line = 48;
					j_75514 = subInt(j_75514, 1);
				}
		} while(false);
		F.line = 51;
		swap_50071(x_75500, x_75500_Idx, j_75514, subInt(i_75504, 1));
		L7: do {
			F.line = 54;
			var k_75533 = 0;
			F.line = 1983;
			var colontmp__75537 = 0;
			F.line = 54;
			colontmp__75537 = subInt(n_75502, 1);
			F.line = 1986;
			var res_75540 = i_75504;
			L8: do {
				F.line = 1987;
					L9: while (true) {
					if (!(res_75540 <= colontmp__75537)) break L9;
						F.line = 1988;
						k_75533 = res_75540;
						if ((k_75533 < subInt(subInt(n_75502, 1), subInt(k_75533, i_75504)))) {
						F.line = 56;
						swap_50071(x_75500, x_75500_Idx, k_75533, subInt(subInt(n_75502, 1), subInt(k_75533, i_75504)));
						}
						else {
							F.line = 58;
							break L7;
						}
						
						F.line = 1989;
						res_75540 = addInt(res_75540, 1);
					}
			} while(false);
		} while(false);
		F.line = 60;
		result_75503 = true;
	} while (false);
	framePtr = F.prev;

	return result_75503;

}

function initTable_76148(initialSize_76153) {
	var result_76174 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(isPowerOfTwo_32627(initialSize_76153))) {
		F.line = 323;
		failedAssertImpl_22439(makeNimstrLit("isPowerOfTwo(initialSize) "));
		}
		
		F.line = 324;
		result_76174.counter = 0;
		F.line = 325;
		result_76174.data = new Array(chckRange(initialSize_76153, 0, 2147483647)); for (var i=0;i<chckRange(initialSize_76153, 0, 2147483647);++i) {result_76174.data[i]={Field0: 0, Field1: 0, Field2: {}};}	framePtr = F.prev;

	return result_76174;

}

function hash_76365(x_76369) {
	var result_76370 = 0;

	var F={procname:"hash.hash",prev:framePtr,filename:"lib/nim/pure/hashes.nim",line:0};
	framePtr = F;
		F.line = 129;
		result_76370 = x_76369;
	framePtr = F.prev;

	return result_76370;

}

function rawGet_76353(t_76358, key_76360, hc_76362, hc_76362_Idx) {
						var Tmp3;

	var result_76363 = 0;

	var F={procname:"rawGet.rawGet",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 43;
		hc_76362[hc_76362_Idx] = hash_76365(key_76360);
		if ((hc_76362[hc_76362_Idx] == 0)) {
		F.line = 45;
		hc_76362[hc_76362_Idx] = 314159265;
		}
		
		F.line = 31;
		var h_76387 = (hc_76362[hc_76362_Idx] & (t_76358.data != null ? (t_76358.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_54465(t_76358.data[chckIndx(h_76387, 0, t_76358.data.length-1)-0].Field0)) break L2;
						if (!(t_76358.data[chckIndx(h_76387, 0, t_76358.data.length-1)-0].Field0 == hc_76362[hc_76362_Idx])) Tmp3 = false; else {							Tmp3 = (t_76358.data[chckIndx(h_76387, 0, t_76358.data.length-1)-0].Field1 == key_76360);						}					if (Tmp3) {
					F.line = 38;
					result_76363 = h_76387;
					break BeforeRet;
					}
					
					F.line = 39;
					h_76387 = nextTry_54601(h_76387, (t_76358.data != null ? (t_76358.data.length-1) : -1));
				}
		} while(false);
		F.line = 75;
		result_76363 = subInt(-1, h_76387);
	} while (false);
	framePtr = F.prev;

	return result_76363;

}

function rawInsert_78330(t_78337, data_78341, data_78341_Idx, key_78343, val_78345, hc_78347, h_78349) {
	var F={procname:"rawInsert.rawInsert",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
		F.line = 64;
		data_78341[data_78341_Idx][chckIndx(h_78349, 0, data_78341[data_78341_Idx].length-1)-0].Field1 = key_78343;
		F.line = 65;
		nimCopy(data_78341[data_78341_Idx][chckIndx(h_78349, 0, data_78341[data_78341_Idx].length-1)-0].Field2, val_78345, NTI65014);
		F.line = 79;
		data_78341[data_78341_Idx][chckIndx(h_78349, 0, data_78341[data_78341_Idx].length-1)-0].Field0 = hc_78347;
	framePtr = F.prev;

	
}

function enlarge_77227(t_77234) {
	var F={procname:"enlarge.enlarge",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 285;
		var n_77238 = null;
		F.line = 286;
		n_77238 = new Array(chckRange(mulInt((t_77234.data != null ? t_77234.data.length : 0), 2), 0, 2147483647)); for (var i=0;i<chckRange(mulInt((t_77234.data != null ? t_77234.data.length : 0), 2), 0, 2147483647);++i) {n_77238[i]={Field0: 0, Field1: 0, Field2: {}};}		F.line = 287;
		var Tmp1 = t_77234.data; t_77234.data = n_77238; n_77238 = Tmp1;		L2: do {
			F.line = 288;
			var i_77444 = 0;
			F.line = 1967;
			var colontmp__78994 = 0;
			F.line = 288;
			colontmp__78994 = (n_77238 != null ? (n_77238.length-1) : -1);
			F.line = 1973;
			var res_78997 = 0;
			L3: do {
				F.line = 1974;
					L4: while (true) {
					if (!(res_78997 <= colontmp__78994)) break L4;
						F.line = 1975;
						i_77444 = res_78997;
						F.line = 289;
						var eh_77658 = n_77238[chckIndx(i_77444, 0, n_77238.length-1)-0].Field0;
						if (isFilled_54465(eh_77658)) {
						F.line = 291;
						var j_77667 = (eh_77658 & (t_77234.data != null ? (t_77234.data.length-1) : -1));
						L5: do {
							F.line = 292;
								L6: while (true) {
								if (!isFilled_54465(t_77234.data[chckIndx(j_77667, 0, t_77234.data.length-1)-0].Field0)) break L6;
									F.line = 293;
									j_77667 = nextTry_54601(j_77667, (t_77234.data != null ? (t_77234.data.length-1) : -1));
								}
						} while(false);
						F.line = 294;
						rawInsert_78330(t_77234, t_77234, "data", n_77238[chckIndx(i_77444, 0, n_77238.length-1)-0].Field1, n_77238[chckIndx(i_77444, 0, n_77238.length-1)-0].Field2, eh_77658, j_77667);
						}
						
						F.line = 1976;
						res_78997 = addInt(res_78997, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	
}

function rawGetKnownHC_79002(t_79007, key_79009, hc_79011) {
	var result_79012 = 0;

	var F={procname:"rawGetKnownHC.rawGetKnownHC",prev:framePtr,filename:"lib/nim/pure/collections/tableimpl.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		var h_79021 = (hc_79011 & (t_79007.data != null ? (t_79007.data.length-1) : -1));
		L1: do {
			F.line = 32;
				L2: while (true) {
				if (!isFilled_54465(t_79007.data[chckIndx(h_79021, 0, t_79007.data.length-1)-0].Field0)) break L2;
					if (((t_79007.data[chckIndx(h_79021, 0, t_79007.data.length-1)-0].Field0 == hc_79011) && (t_79007.data[chckIndx(h_79021, 0, t_79007.data.length-1)-0].Field1 == key_79009))) {
					F.line = 38;
					result_79012 = h_79021;
					break BeforeRet;
					}
					
					F.line = 39;
					h_79021 = nextTry_54601(h_79021, (t_79007.data != null ? (t_79007.data.length-1) : -1));
				}
		} while(false);
		F.line = 69;
		result_79012 = subInt(-1, h_79021);
	} while (false);
	framePtr = F.prev;

	return result_79012;

}

function hasKeyOrPut_76338(t_76345, key_76347, val_76349) {
	var result_76350 = false;

	var F={procname:"hasKeyOrPut.hasKeyOrPut",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 112;
		var hc_76351 = [0];
		F.line = 113;
		var index_77038 = rawGet_76353(t_76345, key_76347, hc_76351, 0);
		if ((index_77038 < 0)) {
		F.line = 115;
		result_76350 = false;
		if (mustRehash_54470((t_76345.data != null ? t_76345.data.length : 0), t_76345.counter)) {
		F.line = 90;
		enlarge_77227(t_76345);
		F.line = 91;
		index_77038 = rawGetKnownHC_79002(t_76345, key_76347, hc_76351[0]);
		}
		
		F.line = 92;
		index_77038 = subInt(-1, index_77038);
		F.line = 93;
		rawInsert_78330(t_76345, t_76345, "data", key_76347, val_76349, hc_76351[0], index_77038);
		F.line = 116;
		t_76345.counter = addInt(t_76345.counter, 1);
		}
		else {
			F.line = 117;
			result_76350 = true;
		}
		
	framePtr = F.prev;

	return result_76350;

}

function X5BX5D__79932(t_79939, key_79941) {
	var result_79943 = null;

	var F={procname:"[].[]",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		F.line = 146;
		var hc_79945 = [0];
		F.line = 147;
		var index_79959 = rawGet_76353(t_79939, key_79941, hc_79945, 0);
		if ((0 <= index_79959)) {
		F.line = 148;
		result_79943 = t_79939.data[chckIndx(index_79959, 0, t_79939.data.length-1)-0].Field2;
		}
		else {
			F.line = 151;
			F.line = 2701;
			var e_80206 = null;
			F.line = 2702;
			e_80206 = {m_type: NTI3450, parent: null, name: null, message: null, trace: null, up: null};
			F.line = 2703;
			e_80206.message = nimCopy(null, (makeNimstrLit("key not found: ").slice(0,-1)).concat(cstrToNimstr(((key_79941|0))+"")), NTI138);
			F.line = 2704;
			e_80206.parent = null;
			raiseException(e_80206, "KeyError");
		}
		
	framePtr = F.prev;

	return result_79943;

}

function sattreeil_75001(f_75003, goal_75013, neg_goal_75016, persistent_bans_75017, persistent_truths_75018, lev_75019) {
			var Tmp1;
			var Tmp2;
							var Tmp7;
											var Tmp14;

											function colonanonymous__75856(boxD_75865) {
												var result_75870 = 0;

												var F={procname:"sattreeil.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
												framePtr = F;
													F.line = 51;
													result_75870 = X5BX5D__65808(f_75003, boxD_75865, 1);
												framePtr = F.prev;

												return result_75870;

											}
											var Tmp15;
																var Tmp20;

																			function colonanonymous__75996(CrhdD_76005) {
																				var result_76010 = 0;

																				var F={procname:"sattreeil.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																				framePtr = F;
																					F.line = 56;
																					result_76010 = X5BX5D__65808(f_75003, CrhdD_76005, 1);
																				framePtr = F.prev;

																				return result_76010;

																			}

																			function colonanonymous__76038(boxC_76040) {
																				var result_76041 = false;

																				var F={procname:"sattreeil.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																				framePtr = F;
																				BeforeRet: do {
																					F.line = 60;
																					var C_76042 = X5BX5D__65808(f_75003, boxC_76040, 1);
																					F.line = 61;
																					result_76041 = sattreeil_75001(f_75003, none_76045(), some_76059(C_76042), pbans_76036, SetPlus(ptruths_76037, setConstr(boxC_76040)), addInt(lev_75019, 1));
																					break BeforeRet;
																				} while (false);
																				framePtr = F.prev;

																				return result_76041;

																			}

																			function colonanonymous__76105(ErhdG_76107) {
																				var result_76108 = false;

																				var F={procname:"sattreeil.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																				framePtr = F;
																				BeforeRet: do {
																					F.line = 63;
																					var G_76109 = X5BX5D__65808(f_75003, ErhdG_76107, 2);
																					F.line = 64;
																					result_76108 = sattreeil_75001(f_75003, some_76059(G_76109), none_76045(), pbans_76036, ptruths_76037, addInt(lev_75019, 1));
																					break BeforeRet;
																				} while (false);
																				framePtr = F.prev;

																				return result_76108;

																			}

											function colonanonymous__80228(D_80230) {
																		var Tmp5;

																					function colonanonymous__80268(CrhdD_80277) {
																						var result_80282 = 0;

																						var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																						framePtr = F;
																							F.line = 86;
																							result_80282 = X5BX5D__65808(f_75003, CrhdD_80277, 1);
																						framePtr = F.prev;

																						return result_80282;

																					}

																					function colonanonymous__80536(CrhdD_80538) {
																						var result_80539 = false;

																						var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																						framePtr = F;
																						BeforeRet: do {
																							F.line = 91;
																							var C_80540 = X5BX5D__65808(f_75003, CrhdD_80538, 1);
																							F.line = 92;
																							result_80539 = sattreeil_75001(f_75003, some_76059(C_80540), none_76045(), pbans_80308, SetPlus(ptruths_80309, setConstr(CrhdD_80538)), addInt(lev_75019, 1));
																							break BeforeRet;
																						} while (false);
																						framePtr = F.prev;

																						return result_80539;

																					}

																					function colonanonymous__80588(ErhdG_80590) {
																						var result_80591 = false;

																						var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
																						framePtr = F;
																						BeforeRet: do {
																							F.line = 94;
																							var G_80592 = X5BX5D__65808(f_75003, ErhdG_80590, 2);
																							F.line = 95;
																							result_80591 = sattreeil_75001(f_75003, some_76059(G_80592), none_76045(), pbans_80308, ptruths_80309, addInt(lev_75019, 1));
																							break BeforeRet;
																						} while (false);
																						framePtr = F.prev;

																						return result_80591;

																					}

												var result_80231 = false;

												var F={procname:"sattreeil.:anonymous",prev:framePtr,filename:"logic_il.nim",line:0};
												framePtr = F;
												BeforeRet: do {
													F.line = 83;
													F.line = 83;
													var base_D_pbans_80244 = SetPlus(base_pbans_75822, setConstr(D_80230));
													L1: do {
														F.line = 84;
														var I_witnesses_80255 = {};
														F.line = 82;
														var subset_80635 = {};
														F.line = 83;
														var m_80637 = SetCard(I_75743);
														if (!((m_80637 <= 16))) {
														F.line = 84;
														failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
														}
														
														L2: do {
															F.line = 85;
															var ii_80639 = 0;
															F.line = 1986;
															var res_80641 = 0;
															L3: do {
																F.line = 1987;
																	L4: while (true) {
																	if (!(res_80641 <= m_80637)) break L4;
																		F.line = 1988;
																		ii_80639 = res_80641;
																		F.line = 86;
																		F.line = 86;
																		switch (false) {
																		case true:
																			Tmp5 = ii_80639;
																			break;
																		case false:
																			Tmp5 = subInt(m_80637, ii_80639);
																			break;
																		default: 
																			break;
																		}
																		var i_80645 = Tmp5;
																		F.line = 89;
																		var a_80647 = [(subInt((1 << i_80645), 1) << subInt(m_80637, i_80645))];
																		F.line = 90;
																		var dowhile_80649 = true;
																		L6: do {
																			F.line = 91;
																				L7: while (true) {
																				if (!dowhile_80649) break L7;
																					F.line = 92;
																					nimCopy(subset_80635, ConstSet12, NTI75214);
																					F.line = 94;
																					var tmpi_80651 = a_80647[0];
																					L8: do {
																						F.line = 95;
																						var val_80653 = 0;
																						F.line = 2112;
																						var i_80655 = -128;
																						L9: do {
																							F.line = 2113;
																								L10: while (true) {
																								if (!(i_80655 <= 127)) break L10;
																									if ((I_75743[chckRange(i_80655, -128, 127)] != undefined)) {
																									F.line = 2114;
																									val_80653 = chckRange(i_80655, -128, 127);
																									if ((1 == (modInt(tmpi_80651, 2)|0))) {
																									F.line = 97;
																									subset_80635[val_80653] = true;
																									}
																									
																									F.line = 98;
																									tmpi_80651 = divInt(tmpi_80651, 2);
																									}
																									
																									F.line = 2115;
																									i_80655 = addInt(i_80655, 1);
																								}
																						} while(false);
																					} while(false);
																					F.line = 99;
																					nimCopy(I_witnesses_80255, subset_80635, NTI75214);
																					F.line = 85;
																					var I_bans_80267 = SetMinus(I_75743, I_witnesses_80255);
																					F.line = 86;
																					var pbans_80308 = SetPlus(base_D_pbans_80244, map_75872(I_bans_80267, colonanonymous__80268));
																					F.line = 87;
																					var ptruths_80309 = nimCopy(null, base_pthruths_75971, NTI75031);
																					F.line = 90;
																					var ok_negs_80587 = all_76080(X5BX5D__79932(N_rhd_by_rhs_76211[0], D_80230), colonanonymous__80536);
																					F.line = 93;
																					var ok_pos_80627 = all_76080(I_witnesses_80255, colonanonymous__80588);
																					if ((ok_negs_80587 && ok_pos_80627)) {
																					F.line = 96;
																					result_80231 = true;
																					break BeforeRet;
																					}
																					
																					F.line = 100;
																					dowhile_80649 = next_permutation_75495(a_80647, 0, m_80637);
																				}
																		} while(false);
																		F.line = 1989;
																		res_80641 = addInt(res_80641, 1);
																	}
															} while(false);
														} while(false);
													} while(false);
													result_80231 = false;
												} while (false);
												framePtr = F.prev;

												return result_80231;

											}

	var result_75020 = false;

	var F={procname:"logic_il.sattreeil",prev:framePtr,filename:"logic_il.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 16;
		F.line = 16;
		var gamma0_75043 = SetPlus(SetPlus(f_75003.boxed_sf, f_75003.rhd_sf), f_75003.prop_sf);
			if (!(SetEq(SetMul(persistent_bans_75017, persistent_truths_75018), ConstSet4))) Tmp2 = true; else {				Tmp2 = (isSome_75077(goal_75013) && (persistent_bans_75017[get_75101(goal_75013)] != undefined));			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = (isSome_75077(neg_goal_75016) && (persistent_truths_75018[get_75101(neg_goal_75016)] != undefined));			}		if (Tmp1) {
		F.line = 22;
		result_75020 = false;
		break BeforeRet;
		}
		
		F.line = 23;
		var vargamma0_75203 = SetMinus(SetMinus(gamma0_75043, persistent_truths_75018), persistent_bans_75017);
		L3: do {
			F.line = 24;
			var varK_75562 = {};
			F.line = 82;
			var subset_80713 = {};
			F.line = 83;
			var m_80715 = SetCard(vargamma0_75203);
			if (!((m_80715 <= 16))) {
			F.line = 84;
			failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
			}
			
			L4: do {
				F.line = 85;
				var ii_80717 = 0;
				F.line = 1986;
				var res_80719 = 0;
				L5: do {
					F.line = 1987;
						L6: while (true) {
						if (!(res_80719 <= m_80715)) break L6;
							F.line = 1988;
							ii_80717 = res_80719;
							F.line = 86;
							F.line = 86;
							switch (false) {
							case true:
								Tmp7 = ii_80717;
								break;
							case false:
								Tmp7 = subInt(m_80715, ii_80717);
								break;
							default: 
								break;
							}
							var i_80723 = Tmp7;
							F.line = 89;
							var a_80725 = [(subInt((1 << i_80723), 1) << subInt(m_80715, i_80723))];
							F.line = 90;
							var dowhile_80727 = true;
							L8: do {
								F.line = 91;
									L9: while (true) {
									if (!dowhile_80727) break L9;
										F.line = 92;
										nimCopy(subset_80713, ConstSet5, NTI75214);
										F.line = 94;
										var tmpi_80729 = a_80725[0];
										L10: do {
											F.line = 95;
											var val_80731 = 0;
											F.line = 2112;
											var i_80733 = -128;
											L11: do {
												F.line = 2113;
													L12: while (true) {
													if (!(i_80733 <= 127)) break L12;
														if ((vargamma0_75203[chckRange(i_80733, -128, 127)] != undefined)) {
														F.line = 2114;
														val_80731 = chckRange(i_80733, -128, 127);
														if ((1 == (modInt(tmpi_80729, 2)|0))) {
														F.line = 97;
														subset_80713[val_80731] = true;
														}
														
														F.line = 98;
														tmpi_80729 = divInt(tmpi_80729, 2);
														}
														
														F.line = 2115;
														i_80733 = addInt(i_80733, 1);
													}
											} while(false);
										} while(false);
										F.line = 99;
										nimCopy(varK_75562, subset_80713, NTI75214);
										L13: do {
											F.line = 25;
											var K_75574 = SetPlus(persistent_truths_75018, varK_75562);
											F.line = 30;
											var truths_75575 = extend_forcing_72347(f_75003, K_75574);
											F.line = 32;
											var goal_satisfied_75623 = (isNone_75117(goal_75013) || (truths_75575[get_75101(goal_75013)] != undefined));
											F.line = 33;
											var neg_goal_avoided_75671 = (isNone_75117(neg_goal_75016) || !((truths_75575[get_75101(neg_goal_75016)] != undefined)));
											F.line = 34;
											var pers_truths_satisfied_75682 = SetLe(persistent_truths_75018, truths_75575);
											F.line = 35;
											var pers_bans_avoided_75707 = SetEq(SetMul(persistent_bans_75017, truths_75575), ConstSet6);
											if (!((((goal_satisfied_75623 && neg_goal_avoided_75671) && pers_truths_satisfied_75682) && pers_bans_avoided_75707))) {
											F.line = 38;
											break L13;
											}
											
											F.line = 39;
											var N_boxed_75719 = SetMinus(f_75003.boxed_sf, K_75574);
											F.line = 40;
											var N_rhd_75731 = SetMinus(f_75003.rhd_sf, K_75574);
											F.line = 41;
											var I_75743 = SetMul(f_75003.rhd_sf, K_75574);
											if ((SetEq(N_boxed_75719, ConstSet7) && SetEq(N_rhd_75731, ConstSet8))) {
											F.line = 46;
											result_75020 = true;
											break BeforeRet;
											}
											
											F.line = 48;
											if (isSome_75077(goal_75013)) {
											Tmp14 = setConstr(get_75101(goal_75013));
											}
											else {
											Tmp14 = ConstSet9;
											}
											
											var base_pbans_75822 = SetPlus(persistent_bans_75017, Tmp14);
											F.line = 49;
											if (isSome_75077(neg_goal_75016)) {
											Tmp15 = setConstr(get_75101(neg_goal_75016));
											}
											else {
											Tmp15 = ConstSet10;
											}
											
											var base_pthruths_75971 = SetPlus(SetPlus(SetPlus(persistent_truths_75018, SetMul(f_75003.boxed_sf, K_75574)), map_75872(SetMul(f_75003.boxed_sf, K_75574), colonanonymous__75856)), Tmp15);
											F.line = 53;
											var found_ok_I_for_boxes_75972 = false;
											L16: do {
												F.line = 54;
												var I_witnesses_75983 = {};
												F.line = 82;
												var subset_80681 = {};
												F.line = 83;
												var m_80683 = SetCard(I_75743);
												if (!((m_80683 <= 16))) {
												F.line = 84;
												failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
												}
												
												L17: do {
													F.line = 85;
													var ii_80685 = 0;
													F.line = 1986;
													var res_80687 = 0;
													L18: do {
														F.line = 1987;
															L19: while (true) {
															if (!(res_80687 <= m_80683)) break L19;
																F.line = 1988;
																ii_80685 = res_80687;
																F.line = 86;
																F.line = 86;
																switch (true) {
																case true:
																	Tmp20 = ii_80685;
																	break;
																case false:
																	Tmp20 = subInt(m_80683, ii_80685);
																	break;
																default: 
																	break;
																}
																var i_80691 = Tmp20;
																F.line = 89;
																var a_80693 = [(subInt((1 << i_80691), 1) << subInt(m_80683, i_80691))];
																F.line = 90;
																var dowhile_80695 = true;
																L21: do {
																	F.line = 91;
																		L22: while (true) {
																		if (!dowhile_80695) break L22;
																			F.line = 92;
																			nimCopy(subset_80681, ConstSet11, NTI75214);
																			F.line = 94;
																			var tmpi_80697 = a_80693[0];
																			L23: do {
																				F.line = 95;
																				var val_80699 = 0;
																				F.line = 2112;
																				var i_80701 = -128;
																				L24: do {
																					F.line = 2113;
																						L25: while (true) {
																						if (!(i_80701 <= 127)) break L25;
																							if ((I_75743[chckRange(i_80701, -128, 127)] != undefined)) {
																							F.line = 2114;
																							val_80699 = chckRange(i_80701, -128, 127);
																							if ((1 == (modInt(tmpi_80697, 2)|0))) {
																							F.line = 97;
																							subset_80681[val_80699] = true;
																							}
																							
																							F.line = 98;
																							tmpi_80697 = divInt(tmpi_80697, 2);
																							}
																							
																							F.line = 2115;
																							i_80701 = addInt(i_80701, 1);
																						}
																				} while(false);
																			} while(false);
																			F.line = 99;
																			nimCopy(I_witnesses_75983, subset_80681, NTI75214);
																			F.line = 55;
																			var I_bans_75995 = SetMinus(I_75743, I_witnesses_75983);
																			F.line = 56;
																			var pbans_76036 = SetPlus(base_pbans_75822, map_75872(I_bans_75995, colonanonymous__75996));
																			F.line = 57;
																			var ptruths_76037 = nimCopy(null, base_pthruths_75971, NTI75031);
																			F.line = 59;
																			var ok_negs_76104 = all_76080(N_boxed_75719, colonanonymous__76038);
																			F.line = 62;
																			var ok_pos_76144 = all_76080(I_witnesses_75983, colonanonymous__76105);
																			if ((ok_negs_76104 && ok_pos_76144)) {
																			F.line = 66;
																			found_ok_I_for_boxes_75972 = true;
																			F.line = 67;
																			break L16;
																			}
																			
																			F.line = 100;
																			dowhile_80695 = next_permutation_75495(a_80693, 0, m_80683);
																		}
																} while(false);
																F.line = 1989;
																res_80687 = addInt(res_80687, 1);
															}
													} while(false);
												} while(false);
											} while(false);
											if (!(found_ok_I_for_boxes_75972)) {
											F.line = 69;
											break L13;
											}
											
											F.line = 71;
											var N_rhd_by_rhs_76211 = [initTable_76148(64)];
											F.line = 72;
											var Ds_76213 = {};
											L26: do {
												F.line = 73;
												var CrhdD_76221 = 0;
												F.line = 2112;
												var i_80706 = -128;
												L27: do {
													F.line = 2113;
														L28: while (true) {
														if (!(i_80706 <= 127)) break L28;
															if ((N_rhd_75731[chckRange(i_80706, -128, 127)] != undefined)) {
															F.line = 2114;
															CrhdD_76221 = chckRange(i_80706, -128, 127);
															F.line = 75;
															var C_76222 = X5BX5D__65808(f_75003, CrhdD_76221, 1);
															F.line = 76;
															var D_76223 = X5BX5D__65808(f_75003, CrhdD_76221, 2);
															F.line = 77;
															Ds_76213[D_76223] = true;
															if (!(hasKeyOrPut_76338(N_rhd_by_rhs_76211[0], D_76223, setConstr(CrhdD_76221)))) {
															F.line = 79;
															X5BX5D__79932(N_rhd_by_rhs_76211[0], D_76223)[CrhdD_76221] = true;
															}
															
															}
															
															F.line = 2115;
															i_80706 = addInt(i_80706, 1);
														}
												} while(false);
											} while(false);
											F.line = 81;
											var all_satisfied_rhd_80671 = all_76080(Ds_76213, colonanonymous__80228);
											if (all_satisfied_rhd_80671) {
											F.line = 100;
											result_75020 = true;
											break BeforeRet;
											}
											
										} while(false);
										F.line = 100;
										dowhile_80727 = next_permutation_75495(a_80725, 0, m_80715);
									}
							} while(false);
							F.line = 1989;
							res_80719 = addInt(res_80719, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		result_75020 = false;
	} while (false);
	framePtr = F.prev;

	return result_75020;

}

function sattreeil_80738(f_80740) {
	var result_80741 = false;

	var F={procname:"logic_il.sattreeil",prev:framePtr,filename:"logic_il.nim",line:0};
	framePtr = F;
		F.line = 104;
		result_80741 = sattreeil_75001(f_80740, some_76059(f_80740.root), none_76045(), ConstSet13, ConstSet14, 0);
	framePtr = F.prev;

	return result_80741;

}

function stareq__81406(x_81411, x_81411_Idx, y_81413) {
	var F={procname:"*=.*=",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 3529;
		x_81411[x_81411_Idx] = mulInt(x_81411[x_81411_Idx], y_81413);
	framePtr = F.prev;

	
}

function roof__81047(x_81051, y_81053) {
	var result_81054 = [0];

	var F={procname:"^.^",prev:framePtr,filename:"lib/nim/pure/math.nim",line:0};
	framePtr = F;
		if (!((0 <= y_81053))) {
		F.line = 420;
		failedAssertImpl_22439(makeNimstrLit("\x0A  T(0) <= y "));
		}
		
		F.line = 423;
		var colontmp__84008 = {Field0: 0, Field1: 0};
		F.line = 423;
		var x_81402 = [0];
		F.line = 423;
		var y_81403 = 0;
		F.line = 423;
		nimCopy(colontmp__84008, {Field0: x_81051, Field1: y_81053}, NTI81401);
		F.line = 423;
		x_81402[0] = colontmp__84008["Field0"];
		F.line = 423;
		y_81403 = colontmp__84008["Field1"];
		F.line = 424;
		result_81054[0] = 1;
		L1: do {
			F.line = 426;
				L2: while (true) {
				if (!true) break L2;
					if (!(((y_81403 & 1) == 0))) {
					F.line = 428;
					stareq__81406(result_81054, 0, x_81402[0]);
					}
					
					F.line = 429;
					y_81403 = chckRange(((y_81403 >>> 0) >>> 1), 0, 2147483647);
					if ((y_81403 == 0)) {
					F.line = 431;
					break L1;
					}
					
					F.line = 432;
					stareq__81406(x_81402, 0, x_81402[0]);
				}
		} while(false);
	framePtr = F.prev;

	return result_81054[0];

}

function X5BX5D__81016(x_81018, n_81019, i_81020, j_81021) {
	var result_81022 = false;

	var F={procname:"logic_ilw.[]",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		F.line = 14;
		result_81022 = ((modInt(((x_81018 ) >>> addInt(mulInt(n_81019, i_81020), j_81021)), 2)|0) == 1);
	framePtr = F.prev;

	return result_81022;

}

function X5BX5Deq__81435(x_81438, x_81438_Idx, n_81439, i_81440, j_81441, b_81442) {
			var Tmp1;
			var Tmp2;
				var Tmp3;

	var F={procname:"logic_ilw.[]=",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
			if (!X5BX5D__81016(x_81438[x_81438_Idx], n_81439, i_81440, j_81441)) Tmp2 = false; else {				Tmp2 = !(b_81442);			}			if (Tmp2) Tmp1 = true; else {				if (!!(X5BX5D__81016(x_81438[x_81438_Idx], n_81439, i_81440, j_81441))) Tmp3 = false; else {					Tmp3 = b_81442;				}				Tmp1 = Tmp3;			}		if (Tmp1) {
		F.line = 18;
		x_81438[x_81438_Idx] = (x_81438[x_81438_Idx] ^ (1 << addInt(mulInt(n_81439, i_81440), j_81441)));
		}
		
	framePtr = F.prev;

	
}

function unary_bit_mat_81635(n_81637) {
	var result_81638 = [0];

	var F={procname:"logic_ilw.unary_bit_mat",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 41;
			var i_81648 = 0;
			F.line = 1983;
			var colontmp__81651 = 0;
			F.line = 41;
			colontmp__81651 = subInt(n_81637, 1);
			F.line = 1986;
			var res_81654 = 0;
			L2: do {
				F.line = 1987;
					L3: while (true) {
					if (!(res_81654 <= colontmp__81651)) break L3;
						F.line = 1988;
						i_81648 = res_81654;
						F.line = 42;
						X5BX5Deq__81435(result_81638, 0, n_81637, i_81648, i_81648, true);
						F.line = 1989;
						res_81654 = addInt(res_81654, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81638[0];

}

function X5BX5D__81002(x_81004, i_81005) {
	var result_81006 = false;

	var F={procname:"logic_ilw.[]",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		F.line = 13;
		result_81006 = ((modInt(((x_81004 ) >>> i_81005), 2)|0) == 1);
	framePtr = F.prev;

	return result_81006;

}

function is_trans_81552(a_81554, n_81555) {
	var result_81556 = false;

	var F={procname:"logic_ilw.is_trans",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		L1: do {
			F.line = 29;
			var k_81566 = 0;
			F.line = 1983;
			var colontmp__81605 = 0;
			F.line = 29;
			colontmp__81605 = subInt(n_81555, 1);
			F.line = 1986;
			var res_81608 = 0;
			L2: do {
				F.line = 1987;
					L3: while (true) {
					if (!(res_81608 <= colontmp__81605)) break L3;
						F.line = 1988;
						k_81566 = res_81608;
						L4: do {
							F.line = 30;
							var i_81576 = 0;
							F.line = 1983;
							var colontmp__81598 = 0;
							F.line = 30;
							colontmp__81598 = subInt(n_81555, 1);
							F.line = 1986;
							var res_81601 = 0;
							L5: do {
								F.line = 1987;
									L6: while (true) {
									if (!(res_81601 <= colontmp__81598)) break L6;
										F.line = 1988;
										i_81576 = res_81601;
										L7: do {
											if ((i_81576 == k_81566)) {
											F.line = 31;
											break L7;
											}
											
											L8: do {
												F.line = 32;
												var j_81586 = 0;
												F.line = 1983;
												var colontmp__81591 = 0;
												F.line = 32;
												colontmp__81591 = subInt(n_81555, 1);
												F.line = 1986;
												var res_81594 = 0;
												L9: do {
													F.line = 1987;
														L10: while (true) {
														if (!(res_81594 <= colontmp__81591)) break L10;
															F.line = 1988;
															j_81586 = res_81594;
															if (((!(X5BX5D__81016(a_81554, n_81555, i_81576, j_81586)) && X5BX5D__81016(a_81554, n_81555, i_81576, k_81566)) && X5BX5D__81016(a_81554, n_81555, k_81566, j_81586))) {
															F.line = 34;
															result_81556 = false;
															break BeforeRet;
															}
															
															F.line = 1989;
															res_81594 = addInt(res_81594, 1);
														}
												} while(false);
											} while(false);
										} while(false);
										F.line = 1989;
										res_81601 = addInt(res_81601, 1);
									}
							} while(false);
						} while(false);
						F.line = 1989;
						res_81608 = addInt(res_81608, 1);
					}
			} while(false);
		} while(false);
		F.line = 35;
		result_81556 = true;
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_81556;

}

function transpose_81510(a_81512, n_81513) {
	var result_81514 = [0];

	var F={procname:"logic_ilw.transpose",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 25;
			var i_81524 = 0;
			F.line = 1983;
			var colontmp__81545 = 0;
			F.line = 25;
			colontmp__81545 = subInt(n_81513, 1);
			F.line = 1986;
			var res_81548 = 0;
			L2: do {
				F.line = 1987;
					L3: while (true) {
					if (!(res_81548 <= colontmp__81545)) break L3;
						F.line = 1988;
						i_81524 = res_81548;
						L4: do {
							F.line = 26;
							var j_81534 = 0;
							F.line = 1983;
							var colontmp__81538 = 0;
							F.line = 26;
							colontmp__81538 = subInt(n_81513, 1);
							F.line = 1986;
							var res_81541 = 0;
							L5: do {
								F.line = 1987;
									L6: while (true) {
									if (!(res_81541 <= colontmp__81538)) break L6;
										F.line = 1988;
										j_81534 = res_81541;
										F.line = 27;
										X5BX5Deq__81435(result_81514, 0, n_81513, i_81524, j_81534, X5BX5D__81016(a_81512, n_81513, j_81534, i_81524));
										F.line = 1989;
										res_81541 = addInt(res_81541, 1);
									}
							} while(false);
						} while(false);
						F.line = 1989;
						res_81548 = addInt(res_81548, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_81514[0];

}

function bitset_to_set_82482(bitset_82486, parent_82489) {
	var result_82491 = {};

	var F={procname:"bitset_to_set.bitset_to_set",prev:framePtr,filename:"helpers.nim",line:0};
	framePtr = F;
		F.line = 113;
		var bitset_82492 = bitset_82486;
		L1: do {
			F.line = 114;
			var el_82500 = 0;
			F.line = 2112;
			var i_82523 = -128;
			L2: do {
				F.line = 2113;
					L3: while (true) {
					if (!(i_82523 <= 127)) break L3;
						if ((parent_82489[chckRange(i_82523, -128, 127)] != undefined)) {
						F.line = 2114;
						el_82500 = chckRange(i_82523, -128, 127);
						if (((modInt(bitset_82492, 2)|0) == 1)) {
						F.line = 116;
						result_82491[el_82500] = true;
						}
						
						F.line = 117;
						bitset_82492 = ((bitset_82492 ) >>> 1);
						}
						
						F.line = 2115;
						i_82523 = addInt(i_82523, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_82491;

}

function get_row_81032(x_81034, i_81035, n_81036) {
	var result_81037 = 0;

	var F={procname:"logic_ilw.get_row",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		F.line = 15;
		result_81037 = modInt(((x_81034 ) >>> mulInt(i_81035, n_81036)), roof__81047(2, chckRange(n_81036, 0, 2147483647)));
	framePtr = F.prev;

	return result_81037;

}

function sattreeilw_81736(f_81738, goal_81741, neg_goal_81744, persistent_bans_81745, persistent_truths_81746, delayed_bans_81747, lev_81748) {
			var Tmp1;
			var Tmp2;
							var Tmp7;
											var Tmp14;

											function colonanonymous__82229(boxD_82238) {
												var result_82243 = 0;

												var F={procname:"sattreeilw.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
												framePtr = F;
													F.line = 113;
													result_82243 = X5BX5D__65808(f_81738, boxD_82238, 1);
												framePtr = F.prev;

												return result_82243;

											}
											var Tmp15;
																var Tmp20;

																								function colonanonymous__82363(CrhdD_82372) {
																									var result_82377 = 0;

																									var F={procname:"sattreeilw.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																									framePtr = F;
																										F.line = 123;
																										result_82377 = X5BX5D__65808(f_81738, CrhdD_82372, 1);
																									framePtr = F.prev;

																									return result_82377;

																								}

																								function colonanonymous__82405(boxC_82407) {
																									var result_82408 = false;

																									var F={procname:"sattreeilw.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																									framePtr = F;
																									BeforeRet: do {
																										F.line = 127;
																										var C_82409 = X5BX5D__65808(f_81738, boxC_82407, 1);
																										F.line = 129;
																										result_82408 = sattreeilw_81736(f_81738, none_76045(), some_76059(C_82409), pbans_82403, SetPlus(ptruths_82404, setConstr(boxC_82407)), ConstSet23, addInt(lev_81748, 1));
																										break BeforeRet;
																									} while (false);
																									framePtr = F.prev;

																									return result_82408;

																								}

																								function colonanonymous__82460(ErhdG_82462) {

																										function colonanonymous__82535(HrhdJ_82544) {
																											var result_82549 = 0;

																											var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																											framePtr = F;
																												F.line = 135;
																												result_82549 = X5BX5D__65808(f_81738, HrhdJ_82544, 1);
																											framePtr = F.prev;

																											return result_82549;

																										}

																										function colonanonymous__82582(HrhdJ_82591) {
																											var result_82596 = 0;

																											var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																											framePtr = F;
																												F.line = 136;
																												result_82596 = X5BX5D__65808(f_81738, HrhdJ_82591, 1);
																											framePtr = F.prev;

																											return result_82596;

																										}

																									var result_82463 = false;

																									var F={procname:"sattreeilw.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																									framePtr = F;
																									BeforeRet: do {
																										F.line = 132;
																										var G_82464 = X5BX5D__65808(f_81738, ErhdG_82462, 2);
																										F.line = 133;
																										index_82459 = addInt(index_82459, 1);
																										F.line = 135;
																										var visibility_bans_82564 = map_75872(SetMinus(I_witnesses_82333, bitset_to_set_82482(get_row_81032(visibility_82341, subInt(index_82459, 1), SetCard(I_witnesses_82333)), I_witnesses_82333)), colonanonymous__82535);
																										F.line = 136;
																										var new_delayed_bans_82611 = map_75872(bitset_to_set_82482(get_row_81032(bivisibility_82350, subInt(index_82459, 1), SetCard(I_witnesses_82333)), I_witnesses_82333), colonanonymous__82582);
																										F.line = 138;
																										result_82463 = sattreeilw_81736(f_81738, some_76059(G_82464), none_76045(), SetPlus(pbans_82403, visibility_bans_82564), ptruths_82404, new_delayed_bans_82611, addInt(lev_81748, 1));
																										break BeforeRet;
																									} while (false);
																									framePtr = F.prev;

																									return result_82463;

																								}

											function colonanonymous__83046(D_83048) {
																		var Tmp5;

																										function colonanonymous__83103(CrhdD_83112) {
																											var result_83117 = 0;

																											var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																											framePtr = F;
																												F.line = 166;
																												result_83117 = X5BX5D__65808(f_81738, CrhdD_83112, 1);
																											framePtr = F.prev;

																											return result_83117;

																										}

																										function colonanonymous__83371(CrhdD_83373) {
																											var result_83374 = false;

																											var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																											framePtr = F;
																											BeforeRet: do {
																												F.line = 171;
																												var C_83375 = X5BX5D__65808(f_81738, CrhdD_83373, 1);
																												F.line = 172;
																												result_83374 = sattreeilw_81736(f_81738, some_76059(C_83375), none_76045(), pbans_83143, SetPlus(ptruths_83144, setConstr(CrhdD_83373)), ConstSet25, addInt(lev_81748, 1));
																												break BeforeRet;
																											} while (false);
																											framePtr = F.prev;

																											return result_83374;

																										}

																										function colonanonymous__83426(ErhdG_83428) {

																												function colonanonymous__83468(HrhdJ_83477) {
																													var result_83482 = 0;

																													var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																													framePtr = F;
																														F.line = 177;
																														result_83482 = X5BX5D__65808(f_81738, HrhdJ_83477, 1);
																													framePtr = F.prev;

																													return result_83482;

																												}

																												function colonanonymous__83515(HrhdJ_83524) {
																													var result_83529 = 0;

																													var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																													framePtr = F;
																														F.line = 178;
																														result_83529 = X5BX5D__65808(f_81738, HrhdJ_83524, 1);
																													framePtr = F.prev;

																													return result_83529;

																												}

																											var result_83429 = false;

																											var F={procname:":anonymous.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
																											framePtr = F;
																											BeforeRet: do {
																												F.line = 175;
																												var G_83430 = X5BX5D__65808(f_81738, ErhdG_83428, 2);
																												F.line = 176;
																												index_83425 = addInt(index_83425, 1);
																												F.line = 177;
																												var visibility_bans_83497 = map_75872(SetMinus(I_witnesses_83073, bitset_to_set_82482(get_row_81032(visibility_83081, subInt(index_83425, 1), SetCard(I_witnesses_83073)), I_witnesses_83073)), colonanonymous__83468);
																												F.line = 178;
																												var new_delayed_bans_83544 = map_75872(bitset_to_set_82482(get_row_81032(bivisibility_83090, subInt(index_83425, 1), SetCard(I_witnesses_83073)), I_witnesses_83073), colonanonymous__83515);
																												F.line = 179;
																												result_83429 = sattreeilw_81736(f_81738, some_76059(G_83430), none_76045(), SetPlus(pbans_83143, visibility_bans_83497), ptruths_83144, new_delayed_bans_83544, addInt(lev_81748, 1));
																												break BeforeRet;
																											} while (false);
																											framePtr = F.prev;

																											return result_83429;

																										}

												var result_83049 = false;

												var F={procname:"sattreeilw.:anonymous",prev:framePtr,filename:"logic_ilw.nim",line:0};
												framePtr = F;
												BeforeRet: do {
													F.line = 160;
													F.line = 160;
													var base_D_pbans_83062 = SetPlus(base_pbans_82195, setConstr(D_83048));
													L1: do {
														F.line = 161;
														var I_witnesses_83073 = {};
														F.line = 82;
														var subset_83637 = {};
														F.line = 83;
														var m_83639 = SetCard(I_82105);
														if (!((m_83639 <= 16))) {
														F.line = 84;
														failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
														}
														
														L2: do {
															F.line = 85;
															var ii_83641 = 0;
															F.line = 1986;
															var res_83643 = 0;
															L3: do {
																F.line = 1987;
																	L4: while (true) {
																	if (!(res_83643 <= m_83639)) break L4;
																		F.line = 1988;
																		ii_83641 = res_83643;
																		F.line = 86;
																		F.line = 86;
																		switch (false) {
																		case true:
																			Tmp5 = ii_83641;
																			break;
																		case false:
																			Tmp5 = subInt(m_83639, ii_83641);
																			break;
																		default: 
																			break;
																		}
																		var i_83647 = Tmp5;
																		F.line = 89;
																		var a_83649 = [(subInt((1 << i_83647), 1) << subInt(m_83639, i_83647))];
																		F.line = 90;
																		var dowhile_83651 = true;
																		L6: do {
																			F.line = 91;
																				L7: while (true) {
																				if (!dowhile_83651) break L7;
																					F.line = 92;
																					nimCopy(subset_83637, ConstSet24, NTI75214);
																					F.line = 94;
																					var tmpi_83653 = a_83649[0];
																					L8: do {
																						F.line = 95;
																						var val_83655 = 0;
																						F.line = 2112;
																						var i_83657 = -128;
																						L9: do {
																							F.line = 2113;
																								L10: while (true) {
																								if (!(i_83657 <= 127)) break L10;
																									if ((I_82105[chckRange(i_83657, -128, 127)] != undefined)) {
																									F.line = 2114;
																									val_83655 = chckRange(i_83657, -128, 127);
																									if ((1 == (modInt(tmpi_83653, 2)|0))) {
																									F.line = 97;
																									subset_83637[val_83655] = true;
																									}
																									
																									F.line = 98;
																									tmpi_83653 = divInt(tmpi_83653, 2);
																									}
																									
																									F.line = 2115;
																									i_83657 = addInt(i_83657, 1);
																								}
																						} while(false);
																					} while(false);
																					F.line = 99;
																					nimCopy(I_witnesses_83073, subset_83637, NTI75214);
																					L11: do {
																						F.line = 162;
																						var visibility_83081 = 0;
																						F.line = 43;
																						var colontmp__83595 = 0;
																						F.line = 162;
																						colontmp__83595 = SetCard(I_witnesses_83073);
																						L12: do {
																							F.line = 44;
																							var seed_83604 = 0;
																							F.line = 1983;
																							var colontmp__83606 = 0;
																							F.line = 44;
																							colontmp__83606 = subInt(roof__81047(2, chckRange(mulInt(subInt(colontmp__83595, 1), colontmp__83595), 0, 2147483647)), 1);
																							F.line = 1986;
																							var res_83608 = 0;
																							L13: do {
																								F.line = 1987;
																									L14: while (true) {
																									if (!(res_83608 <= colontmp__83606)) break L14;
																										F.line = 1988;
																										seed_83604 = res_83608;
																										F.line = 45;
																										var nmat_83612 = [unary_bit_mat_81635(colontmp__83595)];
																										F.line = 46;
																										var it_83614 = 0;
																										L15: do {
																											F.line = 47;
																											var i_83616 = 0;
																											F.line = 1983;
																											var colontmp__83618 = 0;
																											F.line = 47;
																											colontmp__83618 = subInt(colontmp__83595, 1);
																											F.line = 1986;
																											var res_83620 = 0;
																											L16: do {
																												F.line = 1987;
																													L17: while (true) {
																													if (!(res_83620 <= colontmp__83618)) break L17;
																														F.line = 1988;
																														i_83616 = res_83620;
																														L18: do {
																															F.line = 48;
																															var j_83624 = 0;
																															F.line = 1983;
																															var colontmp__83626 = 0;
																															F.line = 48;
																															colontmp__83626 = subInt(colontmp__83595, 1);
																															F.line = 1986;
																															var res_83628 = 0;
																															L19: do {
																																F.line = 1987;
																																	L20: while (true) {
																																	if (!(res_83628 <= colontmp__83626)) break L20;
																																		F.line = 1988;
																																		j_83624 = res_83628;
																																		L21: do {
																																			if ((i_83616 == j_83624)) {
																																			F.line = 49;
																																			break L21;
																																			}
																																			
																																			F.line = 50;
																																			X5BX5Deq__81435(nmat_83612, 0, colontmp__83595, i_83616, j_83624, X5BX5D__81002(seed_83604, it_83614));
																																			F.line = 51;
																																			it_83614 = addInt(it_83614, 1);
																																		} while(false);
																																		F.line = 1989;
																																		res_83628 = addInt(res_83628, 1);
																																	}
																															} while(false);
																														} while(false);
																														F.line = 1989;
																														res_83620 = addInt(res_83620, 1);
																													}
																											} while(false);
																										} while(false);
																										if (is_trans_81552(nmat_83612[0], colontmp__83595)) {
																										F.line = 54;
																										visibility_83081 = nmat_83612[0];
																										F.line = 163;
																										var visibility_t_83089 = transpose_81510(visibility_83081, SetCard(I_witnesses_83073));
																										F.line = 164;
																										var bivisibility_83090 = (visibility_83081 & visibility_t_83089);
																										F.line = 165;
																										var I_bans_83102 = SetMinus(I_82105, I_witnesses_83073);
																										F.line = 166;
																										var pbans_83143 = SetPlus(base_D_pbans_83062, map_75872(I_bans_83102, colonanonymous__83103));
																										F.line = 167;
																										var ptruths_83144 = nimCopy(null, base_pthruths_82321, NTI75031);
																										F.line = 170;
																										var ok_negs_83424 = all_76080(X5BX5D__79932(N_rhd_by_rhs_82670[0], D_83048), colonanonymous__83371);
																										F.line = 173;
																										var index_83425 = 0;
																										F.line = 174;
																										var ok_pos_83592 = all_76080(I_witnesses_83073, colonanonymous__83426);
																										if ((ok_negs_83424 && ok_pos_83592)) {
																										F.line = 180;
																										result_83049 = true;
																										break BeforeRet;
																										}
																										
																										}
																										
																										F.line = 1989;
																										res_83608 = addInt(res_83608, 1);
																									}
																							} while(false);
																						} while(false);
																					} while(false);
																					F.line = 100;
																					dowhile_83651 = next_permutation_75495(a_83649, 0, m_83639);
																				}
																		} while(false);
																		F.line = 1989;
																		res_83643 = addInt(res_83643, 1);
																	}
															} while(false);
														} while(false);
													} while(false);
													result_83049 = false;
												} while (false);
												framePtr = F.prev;

												return result_83049;

											}

	var result_81749 = false;

	var F={procname:"logic_ilw.sattreeilw",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 78;
		F.line = 78;
		var gamma0_81772 = SetPlus(SetPlus(f_81738.boxed_sf, f_81738.rhd_sf), f_81738.prop_sf);
			if (!(SetEq(SetMul(persistent_bans_81745, persistent_truths_81746), ConstSet15))) Tmp2 = true; else {				Tmp2 = (isSome_75077(goal_81741) && (persistent_bans_81745[get_75101(goal_81741)] != undefined));			}			if (Tmp2) Tmp1 = true; else {				Tmp1 = (isSome_75077(neg_goal_81744) && (persistent_truths_81746[get_75101(neg_goal_81744)] != undefined));			}		if (Tmp1) {
		F.line = 84;
		result_81749 = false;
		break BeforeRet;
		}
		
		F.line = 85;
		var vargamma0_81913 = SetMinus(SetMinus(gamma0_81772, persistent_truths_81746), persistent_bans_81745);
		L3: do {
			F.line = 86;
			var varK_81924 = {};
			F.line = 82;
			var subset_83752 = {};
			F.line = 83;
			var m_83754 = SetCard(vargamma0_81913);
			if (!((m_83754 <= 16))) {
			F.line = 84;
			failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
			}
			
			L4: do {
				F.line = 85;
				var ii_83756 = 0;
				F.line = 1986;
				var res_83758 = 0;
				L5: do {
					F.line = 1987;
						L6: while (true) {
						if (!(res_83758 <= m_83754)) break L6;
							F.line = 1988;
							ii_83756 = res_83758;
							F.line = 86;
							F.line = 86;
							switch (false) {
							case true:
								Tmp7 = ii_83756;
								break;
							case false:
								Tmp7 = subInt(m_83754, ii_83756);
								break;
							default: 
								break;
							}
							var i_83762 = Tmp7;
							F.line = 89;
							var a_83764 = [(subInt((1 << i_83762), 1) << subInt(m_83754, i_83762))];
							F.line = 90;
							var dowhile_83766 = true;
							L8: do {
								F.line = 91;
									L9: while (true) {
									if (!dowhile_83766) break L9;
										F.line = 92;
										nimCopy(subset_83752, ConstSet16, NTI75214);
										F.line = 94;
										var tmpi_83768 = a_83764[0];
										L10: do {
											F.line = 95;
											var val_83770 = 0;
											F.line = 2112;
											var i_83772 = -128;
											L11: do {
												F.line = 2113;
													L12: while (true) {
													if (!(i_83772 <= 127)) break L12;
														if ((vargamma0_81913[chckRange(i_83772, -128, 127)] != undefined)) {
														F.line = 2114;
														val_83770 = chckRange(i_83772, -128, 127);
														if ((1 == (modInt(tmpi_83768, 2)|0))) {
														F.line = 97;
														subset_83752[val_83770] = true;
														}
														
														F.line = 98;
														tmpi_83768 = divInt(tmpi_83768, 2);
														}
														
														F.line = 2115;
														i_83772 = addInt(i_83772, 1);
													}
											} while(false);
										} while(false);
										F.line = 99;
										nimCopy(varK_81924, subset_83752, NTI75214);
										L13: do {
											F.line = 87;
											var K_81936 = SetPlus(persistent_truths_81746, varK_81924);
											F.line = 92;
											var truths_81937 = extend_forcing_72347(f_81738, K_81936);
											F.line = 94;
											var goal_satisfied_81985 = (isNone_75117(goal_81741) || (truths_81937[get_75101(goal_81741)] != undefined));
											F.line = 95;
											var neg_goal_avoided_82033 = (isNone_75117(neg_goal_81744) || !((truths_81937[get_75101(neg_goal_81744)] != undefined)));
											F.line = 96;
											var pers_truths_satisfied_82044 = SetLe(persistent_truths_81746, truths_81937);
											F.line = 97;
											var pers_bans_avoided_82069 = SetEq(SetMul(persistent_bans_81745, truths_81937), ConstSet17);
											if (!((((goal_satisfied_81985 && neg_goal_avoided_82033) && pers_truths_satisfied_82044) && pers_bans_avoided_82069))) {
											F.line = 100;
											break L13;
											}
											
											F.line = 101;
											var N_boxed_82081 = SetMinus(f_81738.boxed_sf, K_81936);
											F.line = 102;
											var N_rhd_82093 = SetMinus(f_81738.rhd_sf, K_81936);
											F.line = 103;
											var I_82105 = SetMul(f_81738.rhd_sf, K_81936);
											if ((SetEq(N_boxed_82081, ConstSet18) && SetEq(N_rhd_82093, ConstSet19))) {
											F.line = 108;
											result_81749 = true;
											break BeforeRet;
											}
											
											F.line = 110;
											if (isSome_75077(goal_81741)) {
											Tmp14 = setConstr(get_75101(goal_81741));
											}
											else {
											Tmp14 = ConstSet20;
											}
											
											var base_pbans_82195 = SetPlus(SetPlus(persistent_bans_81745, Tmp14), delayed_bans_81747);
											F.line = 111;
											if (isSome_75077(neg_goal_81744)) {
											Tmp15 = setConstr(get_75101(neg_goal_81744));
											}
											else {
											Tmp15 = ConstSet21;
											}
											
											var base_pthruths_82321 = SetPlus(SetPlus(SetPlus(persistent_truths_81746, SetMul(f_81738.boxed_sf, K_81936)), map_75872(SetMul(f_81738.boxed_sf, K_81936), colonanonymous__82229)), Tmp15);
											F.line = 115;
											var found_ok_I_for_boxes_82322 = false;
											L16: do {
												F.line = 116;
												var I_witnesses_82333 = {};
												F.line = 82;
												var subset_83720 = {};
												F.line = 83;
												var m_83722 = SetCard(I_82105);
												if (!((m_83722 <= 16))) {
												F.line = 84;
												failedAssertImpl_22439(makeNimstrLit("m <= 16 "));
												}
												
												L17: do {
													F.line = 85;
													var ii_83724 = 0;
													F.line = 1986;
													var res_83726 = 0;
													L18: do {
														F.line = 1987;
															L19: while (true) {
															if (!(res_83726 <= m_83722)) break L19;
																F.line = 1988;
																ii_83724 = res_83726;
																F.line = 86;
																F.line = 86;
																switch (true) {
																case true:
																	Tmp20 = ii_83724;
																	break;
																case false:
																	Tmp20 = subInt(m_83722, ii_83724);
																	break;
																default: 
																	break;
																}
																var i_83730 = Tmp20;
																F.line = 89;
																var a_83732 = [(subInt((1 << i_83730), 1) << subInt(m_83722, i_83730))];
																F.line = 90;
																var dowhile_83734 = true;
																L21: do {
																	F.line = 91;
																		L22: while (true) {
																		if (!dowhile_83734) break L22;
																			F.line = 92;
																			nimCopy(subset_83720, ConstSet22, NTI75214);
																			F.line = 94;
																			var tmpi_83736 = a_83732[0];
																			L23: do {
																				F.line = 95;
																				var val_83738 = 0;
																				F.line = 2112;
																				var i_83740 = -128;
																				L24: do {
																					F.line = 2113;
																						L25: while (true) {
																						if (!(i_83740 <= 127)) break L25;
																							if ((I_82105[chckRange(i_83740, -128, 127)] != undefined)) {
																							F.line = 2114;
																							val_83738 = chckRange(i_83740, -128, 127);
																							if ((1 == (modInt(tmpi_83736, 2)|0))) {
																							F.line = 97;
																							subset_83720[val_83738] = true;
																							}
																							
																							F.line = 98;
																							tmpi_83736 = divInt(tmpi_83736, 2);
																							}
																							
																							F.line = 2115;
																							i_83740 = addInt(i_83740, 1);
																						}
																				} while(false);
																			} while(false);
																			F.line = 99;
																			nimCopy(I_witnesses_82333, subset_83720, NTI75214);
																			L26: do {
																				F.line = 118;
																				var visibility_82341 = 0;
																				F.line = 43;
																				var colontmp__83678 = 0;
																				F.line = 118;
																				colontmp__83678 = SetCard(I_witnesses_82333);
																				L27: do {
																					F.line = 44;
																					var seed_83687 = 0;
																					F.line = 1983;
																					var colontmp__83689 = 0;
																					F.line = 44;
																					colontmp__83689 = subInt(roof__81047(2, chckRange(mulInt(subInt(colontmp__83678, 1), colontmp__83678), 0, 2147483647)), 1);
																					F.line = 1986;
																					var res_83691 = 0;
																					L28: do {
																						F.line = 1987;
																							L29: while (true) {
																							if (!(res_83691 <= colontmp__83689)) break L29;
																								F.line = 1988;
																								seed_83687 = res_83691;
																								F.line = 45;
																								var nmat_83695 = [unary_bit_mat_81635(colontmp__83678)];
																								F.line = 46;
																								var it_83697 = 0;
																								L30: do {
																									F.line = 47;
																									var i_83699 = 0;
																									F.line = 1983;
																									var colontmp__83701 = 0;
																									F.line = 47;
																									colontmp__83701 = subInt(colontmp__83678, 1);
																									F.line = 1986;
																									var res_83703 = 0;
																									L31: do {
																										F.line = 1987;
																											L32: while (true) {
																											if (!(res_83703 <= colontmp__83701)) break L32;
																												F.line = 1988;
																												i_83699 = res_83703;
																												L33: do {
																													F.line = 48;
																													var j_83707 = 0;
																													F.line = 1983;
																													var colontmp__83709 = 0;
																													F.line = 48;
																													colontmp__83709 = subInt(colontmp__83678, 1);
																													F.line = 1986;
																													var res_83711 = 0;
																													L34: do {
																														F.line = 1987;
																															L35: while (true) {
																															if (!(res_83711 <= colontmp__83709)) break L35;
																																F.line = 1988;
																																j_83707 = res_83711;
																																L36: do {
																																	if ((i_83699 == j_83707)) {
																																	F.line = 49;
																																	break L36;
																																	}
																																	
																																	F.line = 50;
																																	X5BX5Deq__81435(nmat_83695, 0, colontmp__83678, i_83699, j_83707, X5BX5D__81002(seed_83687, it_83697));
																																	F.line = 51;
																																	it_83697 = addInt(it_83697, 1);
																																} while(false);
																																F.line = 1989;
																																res_83711 = addInt(res_83711, 1);
																															}
																													} while(false);
																												} while(false);
																												F.line = 1989;
																												res_83703 = addInt(res_83703, 1);
																											}
																									} while(false);
																								} while(false);
																								if (is_trans_81552(nmat_83695[0], colontmp__83678)) {
																								F.line = 54;
																								visibility_82341 = nmat_83695[0];
																								F.line = 119;
																								var visibility_t_82349 = transpose_81510(visibility_82341, SetCard(I_witnesses_82333));
																								F.line = 120;
																								var bivisibility_82350 = (visibility_82341 & visibility_t_82349);
																								F.line = 122;
																								var I_bans_82362 = SetMinus(I_82105, I_witnesses_82333);
																								F.line = 123;
																								var pbans_82403 = SetPlus(base_pbans_82195, map_75872(I_bans_82362, colonanonymous__82363));
																								F.line = 124;
																								var ptruths_82404 = nimCopy(null, base_pthruths_82321, NTI75031);
																								F.line = 126;
																								var ok_negs_82458 = all_76080(N_boxed_82081, colonanonymous__82405);
																								F.line = 130;
																								var index_82459 = 0;
																								F.line = 131;
																								var ok_pos_82659 = all_76080(I_witnesses_82333, colonanonymous__82460);
																								if ((ok_negs_82458 && ok_pos_82659)) {
																								F.line = 141;
																								found_ok_I_for_boxes_82322 = true;
																								F.line = 142;
																								break L26;
																								}
																								
																								}
																								
																								F.line = 1989;
																								res_83691 = addInt(res_83691, 1);
																							}
																					} while(false);
																				} while(false);
																			} while(false);
																			if (found_ok_I_for_boxes_82322) {
																			F.line = 144;
																			break L16;
																			}
																			
																			F.line = 100;
																			dowhile_83734 = next_permutation_75495(a_83732, 0, m_83722);
																		}
																} while(false);
																F.line = 1989;
																res_83726 = addInt(res_83726, 1);
															}
													} while(false);
												} while(false);
											} while(false);
											if (!(found_ok_I_for_boxes_82322)) {
											F.line = 146;
											break L13;
											}
											
											F.line = 148;
											var N_rhd_by_rhs_82670 = [initTable_76148(64)];
											F.line = 149;
											var Ds_82672 = {};
											L37: do {
												F.line = 150;
												var CrhdD_82680 = 0;
												F.line = 2112;
												var i_83745 = -128;
												L38: do {
													F.line = 2113;
														L39: while (true) {
														if (!(i_83745 <= 127)) break L39;
															if ((N_rhd_82093[chckRange(i_83745, -128, 127)] != undefined)) {
															F.line = 2114;
															CrhdD_82680 = chckRange(i_83745, -128, 127);
															F.line = 152;
															var C_82681 = X5BX5D__65808(f_81738, CrhdD_82680, 1);
															F.line = 153;
															var D_82682 = X5BX5D__65808(f_81738, CrhdD_82680, 2);
															F.line = 154;
															Ds_82672[D_82682] = true;
															if (!(hasKeyOrPut_76338(N_rhd_by_rhs_82670[0], D_82682, setConstr(CrhdD_82680)))) {
															F.line = 156;
															X5BX5D__79932(N_rhd_by_rhs_82670[0], D_82682)[CrhdD_82680] = true;
															}
															
															}
															
															F.line = 2115;
															i_83745 = addInt(i_83745, 1);
														}
												} while(false);
											} while(false);
											F.line = 158;
											var all_satisfied_rhd_83673 = all_76080(Ds_82672, colonanonymous__83046);
											if (all_satisfied_rhd_83673) {
											F.line = 184;
											result_81749 = true;
											break BeforeRet;
											}
											
										} while(false);
										F.line = 100;
										dowhile_83766 = next_permutation_75495(a_83764, 0, m_83754);
									}
							} while(false);
							F.line = 1989;
							res_83758 = addInt(res_83758, 1);
						}
				} while(false);
			} while(false);
		} while(false);
		result_81749 = false;
	} while (false);
	framePtr = F.prev;

	return result_81749;

}

function sattreeilw_83777(f_83779) {
	var result_83780 = false;

	var F={procname:"logic_ilw.sattreeilw",prev:framePtr,filename:"logic_ilw.nim",line:0};
	framePtr = F;
		F.line = 188;
		result_83780 = sattreeilw_81736(f_83779, some_76059(f_83779.root), none_76045(), ConstSet26, ConstSet27, ConstSet28, 0);
	framePtr = F.prev;

	return result_83780;

}

function check(sf_84003, logic_84004) {
		var Tmp1;
		var Tmp2;

	var F={procname:"main_js.check",prev:framePtr,filename:"main_js.nim",line:0};
	framePtr = F;
		F.line = 11;
		var f_84005 = from_infix_72224(cstrToNimstr(sf_84003));
		F.line = 12;
		if (eqStrings(cstrToNimstr(logic_84004), makeNimstrLit("il"))) {
		Tmp1 = sattreeil_80738(f_84005);
		}
		else {
		if (eqStrings(cstrToNimstr(logic_84004), makeNimstrLit("ilw"))) {
		Tmp1 = sattreeilw_83777(f_84005);
		}
		else {
			F.line = 18;
			alert("not implemented!");
		Tmp1 = false;
		}
		}
		var result_84006 = Tmp1;
		F.line = 19;
		if (result_84006) {
		Tmp2 = makeNimstrLit(" is satisfiable.");
		}
		else {
		Tmp2 = makeNimstrLit(" is not satisfiable.");
		}
		
		window.alert(toJSStr((dollar__71936(f_84005).slice(0,-1)).concat(Tmp2)));
	framePtr = F.prev;

	
}

function sf_get_65064(sf_65066, j_65067) {
		var Tmp1;

	var result_65068 = 0;

	var F={procname:"formula.sf_get",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 46;
		F.line = 46;
		switch (j_65067) {
		case 0:
			Tmp1 = chckRange((sf_65066 & 255), -128, 127);
			break;
		case 1:
			Tmp1 = chckRange((((sf_65066 >>> 0) >>> 8) & 255), -128, 127);
			break;
		case 2:
			Tmp1 = chckRange((((sf_65066 >>> 0) >>> 16) & 255), -128, 127);
			break;
		}
		result_65068 = Tmp1;
	framePtr = F.prev;

	return result_65068;

}

function X5BX5D__65801(f_65803, i_65804, j_65805) {
	var result_65806 = 0;

	var F={procname:"formula.[]",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 75;
		result_65806 = sf_get_65064(f_65803.ast[chckIndx(i_65804, 0, f_65803.ast.length-1)-0], j_65805);
	framePtr = F.prev;

	return result_65806;

}

function X5BX5D__65808(f_65803, i_65804, j_65805) {
	var result_65811 = 0;

	var F={procname:"formula.[]",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 75;
		result_65811 = X5BX5D__65801(f_65803, i_65804, j_65805);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_65811;

}

function X5BX5Deq__65812(f_65815, i_65816, j_65817, value_65818) {
	var F={procname:"formula.[]=",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 76;
		sf_set_65422(f_65815.ast, chckIndx(i_65816, 0, f_65815.ast.length-1)-0, j_65817, value_65818);
	framePtr = F.prev;

	
}

function X5BX5Deq__65820(f_65815, i_65816, j_65817, value_65818) {
	var F={procname:"formula.[]=",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 76;
		X5BX5Deq__65812(f_65815, i_65816, j_65817, value_65818);
	framePtr = F.prev;

	
}

function sf_type_65401(sf_65403) {
		var Tmp1;

	var result_65404 = 0;

	var F={procname:"formula.sf_type",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 58;
		F.line = 58;
		var fcontent_65405 = sf_get_65064(sf_65403, 0);
		if ((fcontent_65405 <= 12)) {
		Tmp1 = chckRange(fcontent_65405, 0, 12);
		}
		else {
		Tmp1 = 11;
		}
		
		result_65404 = Tmp1;
	framePtr = F.prev;

	return result_65404;

}

function update_gamma_66010(f_66013) {
	var F={procname:"formula.update_gamma",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 87;
			var i_66074 = 0;
			F.line = 87;
			var val_66075 = 0;
			F.line = 2157;
			var colontmp__66107 = new Int32Array(256);
			F.line = 87;
			nimCopy(colontmp__66107, f_66013.ast, NTI65056);
			F.line = 2159;
			var i_66110 = 0;
			if ((i_66110 <= 255)) {
			L2: do {
				F.line = 2161;
					L3: while (true) {
					if (!true) break L3;
						F.line = 2162;
						i_66074 = i_66110;
						F.line = 2162;
						val_66075 = colontmp__66107[chckIndx(i_66110, 0, colontmp__66107.length-1)-0];
						F.line = 88;
						switch (sf_type_65401(val_66075)) {
						case 10:
							F.line = 90;
							f_66013.rhd_sf[chckRange(i_66074, -128, 127)] = true;
							break;
						case 8:
							F.line = 92;
							f_66013.boxed_sf[chckRange(i_66074, -128, 127)] = true;
							break;
						case 11:
							F.line = 94;
							f_66013.prop_sf[chckRange(i_66074, -128, 127)] = true;
							break;
						default: 
							break;
						}
						if ((255 <= i_66110)) {
						F.line = 2163;
						break L2;
						}
						
						F.line = 2164;
						i_66110 = addInt(i_66110, 1);
					}
			} while(false);
			}
			
		} while(false);
	framePtr = F.prev;

	
}

function update_gamma_66015(f_66013) {
	var F={procname:"formula.update_gamma",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 86;
		update_gamma_66010(f_66013);
	framePtr = F.prev;

	
}

function dollar__71906(ft_71908) {
		var Tmp1;

	var result_71909 = null;

	var F={procname:"formula.$",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 157;
		F.line = 157;
		switch (ft_71908) {
		case 1:
			Tmp1 = makeNimstrLit("#");
			break;
		case 2:
			Tmp1 = makeNimstrLit("T");
			break;
		case 10:
			Tmp1 = makeNimstrLit("|>");
			break;
		case 6:
			Tmp1 = makeNimstrLit("\xC2\xAC->");
			break;
		case 3:
			Tmp1 = makeNimstrLit("->");
			break;
		case 4:
			Tmp1 = makeNimstrLit("&");
			break;
		case 5:
			Tmp1 = makeNimstrLit("|");
			break;
		case 8:
			Tmp1 = makeNimstrLit("[]");
			break;
		case 9:
			Tmp1 = makeNimstrLit("<>");
			break;
		case 7:
			Tmp1 = makeNimstrLit("\xC2\xAC");
			break;
		case 11:
			Tmp1 = makeNimstrLit("?p?");
			break;
		default: 
			Tmp1 = makeNimstrLit("???");
			break;
		}
		result_71909 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_71909;

}

function sf_to_str_71918(f_71920, sf_71921) {
		var Tmp1;

	var result_71922 = null;

	var F={procname:"formula.sf_to_str",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 203;
		var fcontent_71923 = sf_get_65064(sf_71921, 0);
		F.line = 204;
		var ft_71924 = sf_type_65401(sf_71921);
		F.line = 205;
		var vl_71925 = sf_get_65064(sf_71921, 1);
		F.line = 206;
		var vr_71926 = sf_get_65064(sf_71921, 2);
		F.line = 207;
		F.line = 207;
		switch (ft_71924) {
		case 1:
		case 2:
			Tmp1 = dollar__71906(ft_71924);
			break;
		case 10:
		case 3:
		case 4:
		case 5:
		case 6:
			Tmp1 = (makeNimstrLit("(").slice(0,-1)).concat(sf_to_str_71918(f_71920, f_71920.ast[chckIndx(vl_71925, 0, f_71920.ast.length-1)-0]).slice(0,-1),[32],dollar__71906(ft_71924).slice(0,-1),[32],sf_to_str_71918(f_71920, f_71920.ast[chckIndx(vr_71926, 0, f_71920.ast.length-1)-0]).slice(0,-1),makeNimstrLit(")"));
			break;
		case 7:
		case 8:
		case 9:
			Tmp1 = (dollar__71906(ft_71924).slice(0,-1)).concat(sf_to_str_71918(f_71920, f_71920.ast[chckIndx(vl_71925, 0, f_71920.ast.length-1)-0]));
			break;
		case 11:
			Tmp1 = nimCharToStr(chckRange(fcontent_71923, 0, 255));
			break;
		default: 
			Tmp1 = dollar__71906(ft_71924);
			break;
		}
		result_71922 = nimCopy(null, Tmp1, NTI138);
	framePtr = F.prev;

	return result_71922;

}

function dollar__71931(f_71933) {
	var result_71934 = null;

	var F={procname:"formula.$",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 215;
		result_71934 = nimCopy(null, sf_to_str_71918(f_71933, f_71933.ast[chckIndx(f_71933.root, 0, f_71933.ast.length-1)-0]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_71934;

}

function dollar__71936(f_71933) {
	var result_71939 = null;

	var F={procname:"formula.$",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 214;
		result_71939 = dollar__71931(f_71933);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_71939;

}

function extend_forcing_72242(f_72244, i_72245, sf_ind_72246, true_sfs_72248, false_sfs_72250) {
	var result_72251 = false;

	var F={procname:"formula.extend_forcing",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((true_sfs_72248[sf_ind_72246] != undefined)) {
		F.line = 324;
		result_72251 = true;
		break BeforeRet;
		}
		
		if ((false_sfs_72250[sf_ind_72246] != undefined)) {
		F.line = 325;
		result_72251 = false;
		break BeforeRet;
		}
		
		F.line = 326;
		var sf_72275 = f_72244.ast[chckIndx(sf_ind_72246, 0, f_72244.ast.length-1)-0];
		F.line = 327;
		switch (sf_type_65401(sf_72275)) {
		case 1:
			F.line = 328;
			result_72251 = false;
			break;
		case 2:
			F.line = 329;
			result_72251 = true;
			break;
		case 11:
			F.line = 330;
			result_72251 = (i_72245[sf_ind_72246] != undefined);
			break;
		case 3:
			F.line = 332;
			var lval_72285 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 333;
			var rval_72286 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 2), true_sfs_72248, false_sfs_72250);
			F.line = 334;
			result_72251 = (!(lval_72285) || rval_72286);
			break;
		case 7:
			F.line = 336;
			var lval_72287 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 337;
			result_72251 = !(lval_72287);
			break;
		case 4:
			F.line = 339;
			var lval_72288 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 340;
			var rval_72289 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 2), true_sfs_72248, false_sfs_72250);
			F.line = 341;
			result_72251 = (lval_72288 && rval_72289);
			break;
		case 5:
			F.line = 343;
			var lval_72290 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 344;
			var rval_72291 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 2), true_sfs_72248, false_sfs_72250);
			F.line = 345;
			result_72251 = (lval_72290 || rval_72291);
			break;
		case 6:
			F.line = 347;
			var lval_72292 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 348;
			var rval_72293 = extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 2), true_sfs_72248, false_sfs_72250);
			F.line = 349;
			result_72251 = (lval_72292 && !(rval_72293));
			break;
		case 10:
			F.line = 351;
			extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 352;
			extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 2), true_sfs_72248, false_sfs_72250);
			F.line = 353;
			result_72251 = (i_72245[sf_ind_72246] != undefined);
			break;
		case 8:
			F.line = 354;
			extend_forcing_72253(f_72244, i_72245, sf_get_65064(sf_72275, 1), true_sfs_72248, false_sfs_72250);
			F.line = 354;
			result_72251 = (i_72245[sf_ind_72246] != undefined);
			break;
		default: 
			F.line = 355;
			raiseException({message: (dollar__71936(f_72244).slice(0,-1)).concat(makeNimstrLit(" is not a supported formula")), m_type: NTI3424, parent: null, name: null, trace: null, up: null}, "Exception");
			break;
		}
		if (result_72251) {
		F.line = 357;
		true_sfs_72248[sf_ind_72246] = true;
		}
		else {
			F.line = 359;
		false_sfs_72250[sf_ind_72246] = true;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_72251;

}

function extend_forcing_72253(f_72244, i_72245, sf_ind_72246, true_sfs_72248, false_sfs_72250) {
	var result_72256 = false;

	var F={procname:"formula.extend_forcing",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 323;
		result_72256 = extend_forcing_72242(f_72244, i_72245, sf_ind_72246, true_sfs_72248, false_sfs_72250);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_72256;

}

function extend_forcing_72341(f_72343, i_72344) {
	var result_72345 = [{}];

	var F={procname:"formula.extend_forcing",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
		F.line = 362;
		var false_sfs_72351 = [{}];
		F.line = 363;
		extend_forcing_72253(f_72343, i_72344, f_72343.root, result_72345[0], false_sfs_72351[0]);
	framePtr = F.prev;

	return result_72345[0];

}

function extend_forcing_72347(f_72343, i_72344) {
	var result_72350 = {};

	var F={procname:"formula.extend_forcing",prev:framePtr,filename:"formula.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 360;
		nimCopy(result_72350, extend_forcing_72341(f_72343, i_72344), NTI65014);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_72350;

}
